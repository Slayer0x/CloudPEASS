

import requests
from typing import List, Set, Dict
import itertools

aws_bf_permissions_detectable = [
	"accessanalyzer:GetAnalyzer",
    "accessanalyzer:GetArchiveRule",
    "accessanalyzer:ListAnalyzers",
    "accessanalyzer:ListArchiveRules",
    "accessanalyzer:ListPolicyGenerations",
    "account:GetContactInformation",
    "account:ListRegions",
    "acm-pca:ListCertificateAuthorities",
    "acm:GetAccountConfiguration",
    "acm:ListCertificates",
    "airflow:GetEnvironment",
    "airflow:ListEnvironments",
    "amplify:GetArtifactUrl",
    "amplify:ListApps",
    "amplifybackend:ListS3Buckets",
    "aoss:GetAccountSettings",
    "aoss:GetPoliciesStats",
    "aoss:ListCollections",
    "aoss:ListVpcEndpoints",
    "apigateway:GET",
    "app-integrations:GetDataIntegration",
    "app-integrations:GetEventIntegration",
    "app-integrations:ListApplications",
    "app-integrations:ListDataIntegrationAssociations",
    "app-integrations:ListDataIntegrations",
    "app-integrations:ListEventIntegrationAssociations",
    "app-integrations:ListEventIntegrations",
    "appconfig:GetExtension",
    "appconfig:ListApplications",
    "appconfig:ListDeploymentStrategies",
    "appconfig:ListExtensionAssociations",
    "appconfig:ListExtensions",
    "appfabric:ListAppBundles",
    "appflow:DescribeConnectorProfiles",
    "appflow:DescribeConnectors",
    "appflow:DescribeFlow",
    "appflow:DescribeFlowExecutionRecords",
    "appflow:ListConnectors",
    "appflow:ListFlows",
    "applicationinsights:DescribeApplication",
    "applicationinsights:DescribeComponent",
    "applicationinsights:DescribeComponentConfiguration",
    "applicationinsights:DescribeLogPattern",
    "applicationinsights:ListApplications",
    "applicationinsights:ListComponents",
    "applicationinsights:ListLogPatternSets",
    "applicationinsights:ListLogPatterns",
    "applicationinsights:ListProblems",
    "applicationinsights:ListWorkloads",
    "appmesh:DescribeGatewayRoute",
    "appmesh:DescribeMesh",
    "appmesh:DescribeRoute",
    "appmesh:DescribeVirtualGateway",
    "appmesh:DescribeVirtualNode",
    "appmesh:DescribeVirtualRouter",
    "appmesh:DescribeVirtualService",
    "appmesh:ListGatewayRoutes",
    "appmesh:ListMeshes",
    "appmesh:ListRoutes",
    "appmesh:ListVirtualGateways",
    "appmesh:ListVirtualNodes",
    "appmesh:ListVirtualRouters",
    "appmesh:ListVirtualServices",
    "apprunner:ListAutoScalingConfigurations",
    "apprunner:ListConnections",
    "apprunner:ListObservabilityConfigurations",
    "apprunner:ListServices",
    "apprunner:ListVpcConnectors",
    "apprunner:ListVpcIngressConnections",
    "appstream:DescribeAppBlockBuilders",
    "appstream:DescribeAppBlocks",
    "appstream:DescribeApplications",
    "appstream:DescribeDirectoryConfigs",
    "appstream:DescribeEntitlements",
    "appstream:DescribeFleets",
    "appstream:DescribeImageBuilders",
    "appstream:DescribeImagePermissions",
    "appstream:DescribeImages",
    "appstream:DescribeSessions",
    "appstream:DescribeStacks",
    "appstream:DescribeUsageReportSubscriptions",
    "appstream:ListAssociatedFleets",
    "appstream:ListAssociatedStacks",
    "appstream:ListEntitledApplications",
    "appsync:GetApiAssociation",
    "appsync:GetApiCache",
    "appsync:GetDomainName",
    "appsync:GetFunction",
    "appsync:GetGraphqlApi",
    "appsync:GetResolver",
    "appsync:GetSchemaCreationStatus",
    "appsync:GetType",
    "appsync:ListDomainNames",
    "appsync:ListFunctions",
    "appsync:ListGraphqlApis",
    "appsync:ListResolvers",
    "appsync:ListResolversByFunction",
    "appsync:ListTypes",
    "aps:DescribeAlertManagerDefinition",
    "aps:DescribeLoggingConfiguration",
    "aps:DescribeRuleGroupsNamespace",
    "aps:DescribeWorkspace",
    "aps:ListRuleGroupsNamespaces",
    "aps:ListWorkspaces",
    "arc-zonal-shift:ListManagedResources",
    "arc-zonal-shift:ListZonalShifts",
    "athena:ListApplicationDPUSizes",
    "athena:ListCapacityReservations",
    "athena:ListDataCatalogs",
    "athena:ListEngineVersions",
    "athena:ListNamedQueries",
    "athena:ListQueryExecutions",
    "athena:ListTagsForResource",
    "athena:ListWorkGroups",
    "auditmanager:GetAccountStatus",
    "autoscaling-plans:DescribeScalingPlans",
    "autoscaling:DescribeAccountLimits",
    "autoscaling:DescribeAdjustmentTypes",
    "autoscaling:DescribeAutoScalingGroups",
    "autoscaling:DescribeAutoScalingInstances",
    "autoscaling:DescribeAutoScalingNotificationTypes",
    "autoscaling:DescribeLaunchConfigurations",
    "autoscaling:DescribeLifecycleHookTypes",
    "autoscaling:DescribeLifecycleHooks",
    "autoscaling:DescribeMetricCollectionTypes",
    "autoscaling:DescribeNotificationConfigurations",
    "autoscaling:DescribePolicies",
    "autoscaling:DescribeScalingActivities",
    "autoscaling:DescribeScalingProcessTypes",
    "autoscaling:DescribeScheduledActions",
    "autoscaling:DescribeTags",
    "autoscaling:DescribeTerminationPolicyTypes",
    "aws-marketplace:GetEntitlements",
    "backup-gateway:ListGateways",
    "backup-gateway:ListHypervisors",
    "backup-gateway:ListVirtualMachines",
    "backup:DescribeFramework",
    "backup:DescribeGlobalSettings",
    "backup:DescribeProtectedResource",
    "backup:DescribeRegionSettings",
    "backup:DescribeReportJob",
    "backup:DescribeReportPlan",
    "backup:GetSupportedResourceTypes",
    "backup:ListBackupJobs",
    "backup:ListBackupPlanTemplates",
    "backup:ListBackupPlans",
    "backup:ListBackupVaults",
    "backup:ListCopyJobs",
    "backup:ListFrameworks",
    "backup:ListLegalHolds",
    "backup:ListProtectedResources",
    "backup:ListReportJobs",
    "backup:ListReportPlans",
    "backup:ListRestoreJobs",
    "batch:DescribeComputeEnvironments",
    "batch:DescribeJobDefinitions",
    "batch:DescribeJobQueues",
    "batch:DescribeJobs",
    "batch:ListSchedulingPolicies",
    "bedrock:GetModelInvocationLoggingConfiguration",
    "bedrock:GetProvisionedModelThroughput",
    "bedrock:ListCustomModels",
    "bedrock:ListFoundationModels",
    "bedrock:ListModelCustomizationJobs",
    "bedrock:ListProvisionedModelThroughputs",
    "billingconductor:ListAccountAssociations",
    "billingconductor:ListBillingGroupCostReports",
    "billingconductor:ListBillingGroups",
    "billingconductor:ListCustomLineItems",
    "billingconductor:ListPricingPlans",
    "billingconductor:ListPricingRules",
    "cases:GetCaseEventConfiguration",
    "cases:GetDomain",
    "cases:GetLayout",
    "cases:GetTemplate",
    "cases:ListCasesForContact",
    "cases:ListDomains",
    "cases:ListFieldOptions",
    "cases:ListFields",
    "cases:ListLayouts",
    "cases:ListTemplates",
    "cassandra:Select",
    "ce:GetAnomalyMonitors",
    "ce:GetAnomalySubscriptions",
    "ce:ListCostAllocationTags",
    "ce:ListCostCategoryDefinitions",
    "ce:ListSavingsPlansPurchaseRecommendationGeneration",
    "chime:GetAccount",
    "chime:GetBot",
    "chime:GetEventsConfiguration",
    "chime:GetGlobalSettings",
    "chime:GetMediaInsightsPipelineConfiguration",
    "chime:GetMediaPipelineKinesisVideoStreamPool",
    "chime:GetMessagingSessionEndpoint",
    "chime:GetPhoneNumber",
    "chime:GetPhoneNumberSettings",
    "chime:GetProxySession",
    "chime:GetSipMediaApplication",
    "chime:GetSipMediaApplicationAlexaSkillConfiguration",
    "chime:GetSipMediaApplicationLoggingConfiguration",
    "chime:GetSipRule",
    "chime:GetUser",
    "chime:GetUserSettings",
    "chime:GetVoiceConnector",
    "chime:GetVoiceConnectorEmergencyCallingConfiguration",
    "chime:GetVoiceConnectorGroup",
    "chime:GetVoiceConnectorLoggingConfiguration",
    "chime:GetVoiceConnectorOrigination",
    "chime:GetVoiceConnectorProxy",
    "chime:GetVoiceConnectorStreamingConfiguration",
    "chime:GetVoiceConnectorTermination",
    "chime:GetVoiceConnectorTerminationHealth",
    "chime:ListAccounts",
    "chime:ListAppInstances",
    "chime:ListAvailableVoiceConnectorRegions",
    "chime:ListBots",
    "chime:ListMediaCapturePipelines",
    "chime:ListMediaInsightsPipelineConfigurations",
    "chime:ListMediaPipelineKinesisVideoStreamPools",
    "chime:ListMediaPipelines",
    "chime:ListPhoneNumberOrders",
    "chime:ListPhoneNumbers",
    "chime:ListProxySessions",
    "chime:ListSipMediaApplications",
    "chime:ListSipRules",
    "chime:ListUsers",
    "chime:ListVoiceConnectorGroups",
    "chime:ListVoiceConnectorTerminationCredentials",
    "chime:ListVoiceConnectors",
    "chime:ListVoiceProfileDomains",
    "cleanrooms:ListCollaborations",
    "cleanrooms:ListConfiguredTables",
    "cleanrooms:ListMemberships",
    "cloud9:DescribeEnvironmentMemberships",
    "cloud9:DescribeEnvironmentStatus",
    "cloud9:DescribeEnvironments",
    "cloud9:ListEnvironments",
    "clouddirectory:ListDevelopmentSchemaArns",
    "clouddirectory:ListDirectories",
    "clouddirectory:ListManagedSchemaArns",
    "clouddirectory:ListPublishedSchemaArns",
    "cloudformation:DescribeAccountLimits",
    "cloudformation:DescribeOrganizationsAccess",
    "cloudformation:DescribeStackSet",
    "cloudformation:DescribeStackSetOperation",
    "cloudformation:DescribeStacks",
    "cloudformation:GetResourceRequestStatus",
    "cloudformation:ListExports",
    "cloudformation:ListResourceRequests",
    "cloudformation:ListStackInstances",
    "cloudformation:ListStackSetOperationResults",
    "cloudformation:ListStackSetOperations",
    "cloudformation:ListStackSets",
    "cloudformation:ListStacks",
    "cloudformation:ListTypes",
    "cloudfront:ListCachePolicies",
    "cloudfront:ListCloudFrontOriginAccessIdentities",
    "cloudfront:ListContinuousDeploymentPolicies",
    "cloudfront:ListDistributions",
    "cloudfront:ListDistributionsByWebACLId",
    "cloudfront:ListFieldLevelEncryptionConfigs",
    "cloudfront:ListFieldLevelEncryptionProfiles",
    "cloudfront:ListFunctions",
    "cloudfront:ListKeyGroups",
    "cloudfront:ListOriginAccessControls",
    "cloudfront:ListOriginRequestPolicies",
    "cloudfront:ListPublicKeys",
    "cloudfront:ListRealtimeLogConfigs",
    "cloudfront:ListResponseHeadersPolicies",
    "cloudfront:ListStreamingDistributions",
    "cloudhsm:DescribeBackups",
    "cloudhsm:DescribeClusters",
    "cloudtrail:DescribeTrails",
    "cloudtrail:GetEventDataStore",
    "cloudtrail:GetEventSelectors",
    "cloudtrail:GetInsightSelectors",
    "cloudtrail:GetTrail",
    "cloudtrail:GetTrailStatus",
    "cloudtrail:ListChannels",
    "cloudtrail:ListEventDataStores",
    "cloudtrail:ListImports",
    "cloudtrail:ListPublicKeys",
    "cloudtrail:ListQueries",
    "cloudtrail:ListTrails",
    "cloudwatch:DescribeAlarmHistory",
    "cloudwatch:DescribeAlarms",
    "cloudwatch:DescribeAlarmsForMetric",
    "cloudwatch:DescribeAnomalyDetectors",
    "cloudwatch:DescribeInsightRules",
    "cloudwatch:GetMetricStream",
    "cloudwatch:ListDashboards",
    "cloudwatch:ListManagedInsightRules",
    "cloudwatch:ListMetricStreams",
    "cloudwatch:ListMetrics",
    "codeartifact:ListDomains",
    "codeartifact:ListRepositories",
    "codebuild:ListBuildBatches",
    "codebuild:ListBuilds",
    "codebuild:ListBuildsForProject",
    "codebuild:ListCuratedEnvironmentImages",
    "codebuild:ListProjects",
    "codebuild:ListReportGroups",
    "codebuild:ListReports",
    "codebuild:ListSharedProjects",
    "codebuild:ListSharedReportGroups",
    "codebuild:ListSourceCredentials",
    "codecommit:ListApprovalRuleTemplates",
    "codecommit:ListRepositories",
    "codeguru-profiler:DescribeProfilingGroup",
    "codeguru-profiler:GetFindingsReportAccountSummary",
    "codeguru-profiler:GetNotificationConfiguration",
    "codeguru-profiler:GetPolicy",
    "codeguru-profiler:ListProfilingGroups",
    "codeguru-reviewer:ListRepositoryAssociations",
    "codeguru-security:GetAccountConfiguration",
    "codeguru-security:GetFindings",
    "codeguru-security:GetScan",
    "codeguru-security:ListScans",
    "codepipeline:GetPipeline",
    "codepipeline:GetPipelineState",
    "codepipeline:GetThirdPartyJobDetails",
    "codepipeline:ListActionExecutions",
    "codepipeline:ListActionTypes",
    "codepipeline:ListPipelineExecutions",
    "codepipeline:ListPipelines",
    "codepipeline:ListWebhooks",
    "codeploy:ListApplications",
    "codeploy:ListDeploymentConfigs",
    "codeploy:ListDeployments",
    "codeploy:ListGitHubAccountTokenNames",
    "codeploy:ListOnPremisesInstances",
    "codestar-connections:ListConnections",
    "codestar-connections:ListHosts",
    "codestar-notifications:ListEventTypes",
    "codestar-notifications:ListNotificationRules",
    "codestar-notifications:ListTargets",
    "cognito-idp:DescribeUserPoolDomain",
    "cognito-sync:ListIdentityPoolUsage",
    "comprehend:DescribeDocumentClassificationJob",
    "comprehend:DescribeDominantLanguageDetectionJob",
    "comprehend:DescribeEntitiesDetectionJob",
    "comprehend:DescribeEventsDetectionJob",
    "comprehend:DescribeKeyPhrasesDetectionJob",
    "comprehend:DescribePiiEntitiesDetectionJob",
    "comprehend:DescribeSentimentDetectionJob",
    "comprehend:DescribeTargetedSentimentDetectionJob",
    "comprehend:DescribeTopicsDetectionJob",
    "comprehend:ListDocumentClassificationJobs",
    "comprehend:ListDocumentClassifierSummaries",
    "comprehend:ListDocumentClassifiers",
    "comprehend:ListDominantLanguageDetectionJobs",
    "comprehend:ListEndpoints",
    "comprehend:ListEntitiesDetectionJobs",
    "comprehend:ListEntityRecognizerSummaries",
    "comprehend:ListEntityRecognizers",
    "comprehend:ListEventsDetectionJobs",
    "comprehend:ListFlywheels",
    "comprehend:ListKeyPhrasesDetectionJobs",
    "comprehend:ListPiiEntitiesDetectionJobs",
    "comprehend:ListSentimentDetectionJobs",
    "comprehend:ListTargetedSentimentDetectionJobs",
    "comprehend:ListTopicsDetectionJobs",
    "comprehendmedical:DescribeEntitiesDetectionV2Job",
    "comprehendmedical:DescribeIcd10CmInferenceJob",
    "comprehendmedical:DescribePhiDetectionJob",
    "comprehendmedical:DescribeRxNormInferenceJob",
    "comprehendmedical:DescribeSnomedctInferenceJob",
    "comprehendmedical:ListEntitiesDetectionV2Jobs",
    "comprehendmedical:ListICD10CMInferenceJobs",
    "comprehendmedical:ListPHIDetectionJobs",
    "comprehendmedical:ListRxNormInferenceJobs",
    "comprehendmedical:ListSNOMEDCTInferenceJobs",
    "compute-optimizer:GetEnrollmentStatus",
    "config:DescribeAggregationAuthorizations",
    "config:DescribeComplianceByConfigRule",
    "config:DescribeComplianceByResource",
    "config:DescribeConfigRuleEvaluationStatus",
    "config:DescribeConfigRules",
    "config:DescribeConfigurationAggregators",
    "config:DescribeConfigurationRecorderStatus",
    "config:DescribeConfigurationRecorders",
    "config:DescribeConformancePackStatus",
    "config:DescribeConformancePacks",
    "config:DescribeDeliveryChannelStatus",
    "config:DescribeDeliveryChannels",
    "config:DescribeOrganizationConfigRuleStatuses",
    "config:DescribeOrganizationConfigRules",
    "config:DescribeOrganizationConformancePackStatuses",
    "config:DescribeOrganizationConformancePacks",
    "config:DescribePendingAggregationRequests",
    "config:DescribeRemediationConfigurations",
    "config:DescribeRetentionConfigurations",
    "config:GetComplianceSummaryByConfigRule",
    "config:GetComplianceSummaryByResourceType",
    "config:GetDiscoveredResourceCounts",
    "config:GetResourceEvaluationSummary",
    "config:GetStatus",
    "config:GetStoredQuery",
    "config:ListConformancePackComplianceScores",
    "config:ListDiscoveredResources",
    "config:ListResourceEvaluations",
    "config:ListStoredQueries",
    "configure:List",
    "configure:ListProfiles",
    "connect-campaigns:DescribeCampaign",
    "connect-campaigns:GetCampaignState",
    "connect-campaigns:GetCampaignStateBatch",
    "connect-campaigns:GetConnectInstanceConfig",
    "connect-campaigns:GetInstanceOnboardingJobStatus",
    "connect-campaigns:ListCampaigns",
    "connect:DescribeInstance",
    "connect:DescribeRule",
    "connect:DescribeSecurityProfile",
    "connect:DescribeView",
    "connect:DescribeVocabulary",
    "connect:GetFederationToken",
    "connect:GetTaskTemplate",
    "connect:ListDefaultVocabularies",
    "connect:ListInstances",
    "connect:ListLambdaFunctions",
    "connect:ListLexBots",
    "connect:ListPhoneNumbersV2",
    "connect:ListRules",
    "connect:ListSecurityKeys",
    "connect:ListSecurityProfileApplications",
    "connect:ListSecurityProfilePermissions",
    "connect:ListTaskTemplates",
    "connect:ListTrafficDistributionGroups",
    "connect:ListViewVersions",
    "connect:ListViews",
    "cur:DescribeReportDefinitions",
    "databrew:DescribeDataset",
    "databrew:DescribeJob",
    "databrew:DescribeJobRun",
    "databrew:DescribeProject",
    "databrew:DescribeRecipe",
    "databrew:DescribeRuleset",
    "databrew:DescribeSchedule",
    "databrew:ListDatasets",
    "databrew:ListJobRuns",
    "databrew:ListJobs",
    "databrew:ListProjects",
    "databrew:ListRecipeVersions",
    "databrew:ListRecipes",
    "databrew:ListRulesets",
    "databrew:ListSchedules",
    "dataexchange:ListDataSets",
    "dataexchange:ListEventActions",
    "dataexchange:ListJobs",
    "datapipeline:DescribeObjects",
    "datapipeline:DescribePipelines",
    "datapipeline:GetPipelineDefinition",
    "datapipeline:ListPipelines",
    "datapipeline:ListRuns",
    "datasync:ListAgents",
    "datasync:ListDiscoveryJobs",
    "datasync:ListLocations",
    "datasync:ListStorageSystems",
    "datasync:ListTaskExecutions",
    "datasync:ListTasks",
    "datazone:ListDomains",
    "dax:DescribeClusters",
    "dax:DescribeDefaultParameters",
    "dax:DescribeEvents",
    "dax:DescribeParameterGroups",
    "dax:DescribeSubnetGroups",
    "detective:ListGraphs",
    "detective:ListInvitations",
    "detective:ListOrganizationAdminAccount",
    "devops-guru:DescribeAccountHealth",
    "devops-guru:DescribeAnomaly",
    "devops-guru:DescribeInsight",
    "devops-guru:DescribeServiceIntegration",
    "devops-guru:GetCostEstimation",
    "devops-guru:ListAnomaliesForInsight",
    "devops-guru:ListMonitoredResources",
    "devops-guru:ListNotificationChannels",
    "devops-guru:ListRecommendations",
    "directconnect:DescribeConnections",
    "directconnect:DescribeCustomerMetadata",
    "directconnect:DescribeDirectConnectGatewayAssociationProposals",
    "directconnect:DescribeDirectConnectGateways",
    "directconnect:DescribeLags",
    "directconnect:DescribeLocations",
    "directconnect:DescribeVirtualGateways",
    "directconnect:DescribeVirtualInterfaces",
    "directconnect:ListVirtualInterfaceTestHistory",
    "discovery:DescribeAgents",
    "discovery:DescribeContinuousExports",
    "discovery:DescribeExportTasks",
    "discovery:DescribeImportTasks",
    "discovery:DescribeTags",
    "discovery:GetDiscoverySummary",
    "discovery:ListServerNeighbors",
    "dlm:GetLifecyclePolicies",
    "dms:DescribeAccountAttributes",
    "dms:DescribeApplicableIndividualAssessments",
    "dms:DescribeCertificates",
    "dms:DescribeConnections",
    "dms:DescribeDataProviders",
    "dms:DescribeEndpointTypes",
    "dms:DescribeEndpoints",
    "dms:DescribeEngineVersions",
    "dms:DescribeEventCategories",
    "dms:DescribeEventSubscriptions",
    "dms:DescribeEvents",
    "dms:DescribeFleetAdvisorCollectors",
    "dms:DescribeFleetAdvisorDatabases",
    "dms:DescribeFleetAdvisorLsaAnalysis",
    "dms:DescribeFleetAdvisorSchemaObjectSummary",
    "dms:DescribeFleetAdvisorSchemas",
    "dms:DescribeInstanceProfiles",
    "dms:DescribeMigrationProjects",
    "dms:DescribeOrderableReplicationInstances",
    "dms:DescribePendingMaintenanceActions",
    "dms:DescribeRecommendationLimitations",
    "dms:DescribeRecommendations",
    "dms:DescribeReplicationConfigs",
    "dms:DescribeReplicationInstances",
    "dms:DescribeReplicationSubnetGroups",
    "dms:DescribeReplicationTaskAssessmentRuns",
    "dms:DescribeReplicationTaskIndividualAssessments",
    "dms:DescribeReplicationTasks",
    "dms:DescribeReplications",
    "docdb-elastic:ListClusterSnapshots",
    "docdb-elastic:ListClusters",
    "ds:DescribeDirectories",
    "ds:DescribeEventTopics",
    "ds:DescribeSnapshots",
    "ds:DescribeTrusts",
    "ds:GetDirectoryLimits",
    "ds:ListLogSubscriptions",
    "dynamodb:DescribeContinuousBackups",
    "dynamodb:DescribeContributorInsights",
    "dynamodb:DescribeEndpoints",
    "dynamodb:DescribeGlobalTable",
    "dynamodb:DescribeGlobalTableSettings",
    "dynamodb:DescribeKinesisStreamingDestination",
    "dynamodb:DescribeLimits",
    "dynamodb:DescribeTable",
    "dynamodb:DescribeTableReplicaAutoScaling",
    "dynamodb:DescribeTimeToLive",
    "dynamodb:ListBackups",
    "dynamodb:ListContributorInsights",
    "dynamodb:ListExports",
    "dynamodb:ListGlobalTables",
    "dynamodb:ListImports",
    "dynamodb:ListStreams",
    "dynamodb:ListTables",
    "ec2:DescribeAccountAttributes",
    "ec2:DescribeAddressTransfers",
    "ec2:DescribeAddresses",
    "ec2:DescribeAddressesAttribute",
    "ec2:DescribeAggregateIdFormat",
    "ec2:DescribeAvailabilityZones",
    "ec2:DescribeAwsNetworkPerformanceMetricSubscriptions",
    "ec2:DescribeBundleTasks",
    "ec2:DescribeCapacityReservationFleets",
    "ec2:DescribeCapacityReservations",
    "ec2:DescribeCarrierGateways",
    "ec2:DescribeClassicLinkInstances",
    "ec2:DescribeClientVpnEndpoints",
    "ec2:DescribeCoipPools",
    "ec2:DescribeConversionTasks",
    "ec2:DescribeCustomerGateways",
    "ec2:DescribeDhcpOptions",
    "ec2:DescribeEgressOnlyInternetGateways",
    "ec2:DescribeExportImageTasks",
    "ec2:DescribeExportTasks",
    "ec2:DescribeFastLaunchImages",
    "ec2:DescribeFastSnapshotRestores",
    "ec2:DescribeFleets",
    "ec2:DescribeFlowLogs",
    "ec2:DescribeFpgaImages",
    "ec2:DescribeHostReservationOfferings",
    "ec2:DescribeHostReservations",
    "ec2:DescribeHosts",
    "ec2:DescribeIamInstanceProfileAssociations",
    "ec2:DescribeIdFormat",
    "ec2:DescribeImportImageTasks",
    "ec2:DescribeImportSnapshotTasks",
    "ec2:DescribeInstanceConnectEndpoints",
    "ec2:DescribeInstanceCreditSpecifications",
    "ec2:DescribeInstanceEventNotificationAttributes",
    "ec2:DescribeInstanceEventWindows",
    "ec2:DescribeInstanceStatus",
    "ec2:DescribeInstanceTypeOfferings",
    "ec2:DescribeInstanceTypes",
    "ec2:DescribeInstances",
    "ec2:DescribeInternetGateways",
    "ec2:DescribeIpamPools",
    "ec2:DescribeIpamResourceDiscoveries",
    "ec2:DescribeIpamResourceDiscoveryAssociations",
    "ec2:DescribeIpamScopes",
    "ec2:DescribeIpams",
    "ec2:DescribeIpv6Pools",
    "ec2:DescribeKeyPairs",
    "ec2:DescribeLaunchTemplates",
    "ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
    "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
    "ec2:DescribeLocalGatewayRouteTables",
    "ec2:DescribeLocalGatewayVirtualInterfaceGroups",
    "ec2:DescribeLocalGatewayVirtualInterfaces",
    "ec2:DescribeLocalGateways",
    "ec2:DescribeManagedPrefixLists",
    "ec2:DescribeNatGateways",
    "ec2:DescribeNetworkAcls",
    "ec2:DescribeNetworkInsightsAccessScopeAnalyses",
    "ec2:DescribeNetworkInsightsAccessScopes",
    "ec2:DescribeNetworkInsightsAnalyses",
    "ec2:DescribeNetworkInsightsPaths",
    "ec2:DescribeNetworkInterfacePermissions",
    "ec2:DescribeNetworkInterfaces",
    "ec2:DescribePlacementGroups",
    "ec2:DescribePrefixLists",
    "ec2:DescribePrincipalIdFormat",
    "ec2:DescribePublicIpv4Pools",
    "ec2:DescribeRegions",
    "ec2:DescribeReplaceRootVolumeTasks",
    "ec2:DescribeReservedInstances",
    "ec2:DescribeReservedInstancesModifications",
    "ec2:DescribeRouteTables",
    "ec2:DescribeScheduledInstances",
    "ec2:DescribeSecurityGroupRules",
    "ec2:DescribeSecurityGroups",
    "ec2:DescribeSnapshotTierStatus",
    "ec2:DescribeSpotFleetRequests",
    "ec2:DescribeSpotInstanceRequests",
    "ec2:DescribeStoreImageTasks",
    "ec2:DescribeSubnets",
    "ec2:DescribeTags",
    "ec2:DescribeTrafficMirrorFilters",
    "ec2:DescribeTrafficMirrorSessions",
    "ec2:DescribeTrafficMirrorTargets",
    "ec2:DescribeTransitGatewayAttachments",
    "ec2:DescribeTransitGatewayConnectPeers",
    "ec2:DescribeTransitGatewayConnects",
    "ec2:DescribeTransitGatewayMulticastDomains",
    "ec2:DescribeTransitGatewayPeeringAttachments",
    "ec2:DescribeTransitGatewayPolicyTables",
    "ec2:DescribeTransitGatewayRouteTableAnnouncements",
    "ec2:DescribeTransitGatewayRouteTables",
    "ec2:DescribeTransitGatewayVpcAttachments",
    "ec2:DescribeTransitGateways",
    "ec2:DescribeVerifiedAccessEndpoints",
    "ec2:DescribeVerifiedAccessGroups",
    "ec2:DescribeVerifiedAccessInstanceLoggingConfigurations",
    "ec2:DescribeVerifiedAccessInstances",
    "ec2:DescribeVerifiedAccessTrustProviders",
    "ec2:DescribeVolumeStatus",
    "ec2:DescribeVolumes",
    "ec2:DescribeVolumesModifications",
    "ec2:DescribeVpcClassicLink",
    "ec2:DescribeVpcClassicLinkDnsSupport",
    "ec2:DescribeVpcEndpointConnectionNotifications",
    "ec2:DescribeVpcEndpointConnections",
    "ec2:DescribeVpcEndpointServiceConfigurations",
    "ec2:DescribeVpcEndpointServices",
    "ec2:DescribeVpcEndpoints",
    "ec2:DescribeVpcPeeringConnections",
    "ec2:DescribeVpcs",
    "ec2:DescribeVpnConnections",
    "ec2:DescribeVpnGateways",
    "ec2:GetEbsDefaultKmsKeyId",
    "ec2:GetEbsEncryptionByDefault",
    "ec2:GetImageBlockPublicAccessState",
    "ec2:GetSerialConsoleAccessStatus",
    "ec2:GetVpnConnectionDeviceTypes",
    "ec2:ListImagesInRecycleBin",
    "ec2:ListSnapshotsInRecycleBin",
    "ecr-public:DescribeRegistries",
    "ecr-public:DescribeRepositories",
    "ecr-public:GetAuthorizationToken",
    "ecr-public:GetLoginPassword",
    "ecr-public:GetRegistryCatalogData",
    "ecr:DescribePullThroughCacheRules",
    "ecr:DescribeRegistry",
    "ecr:DescribeRepositories",
    "ecr:GetAuthorizationToken",
    "ecr:GetRegistryPolicy",
    "ecr:GetRegistryScanningConfiguration",
    "ecs:DescribeCapacityProviders",
    "ecs:DescribeClusters",
    "ecs:DescribeContainerInstances",
    "ecs:DescribeServices",
    "ecs:DescribeTasks",
    "ecs:ListAccountSettings",
    "ecs:ListAttributes",
    "ecs:ListClusters",
    "ecs:ListContainerInstances",
    "ecs:ListServices",
    "ecs:ListServicesByNamespace",
    "ecs:ListTaskDefinitionFamilies",
    "ecs:ListTaskDefinitions",
    "ecs:ListTasks",
    "eks:DescribeAddon",
    "eks:DescribeAddonConfiguration",
    "eks:DescribeAddonVersions",
    "eks:DescribeCluster",
    "eks:DescribeFargateProfile",
    "eks:DescribeNodegroup",
    "eks:DescribeUpdate",
    "eks:ListAddons",
    "eks:ListClusters",
    "eks:ListFargateProfiles",
    "eks:ListIdentityProviderConfigs",
    "eks:ListNodegroups",
    "eks:ListUpdates",
    "elastic-inference:DescribeAcceleratorTypes",
    "elastic-inference:DescribeAccelerators",
    "elasticache:DescribeCacheClusters",
    "elasticache:DescribeCacheEngineVersions",
    "elasticache:DescribeCacheParameterGroups",
    "elasticache:DescribeCacheSubnetGroups",
    "elasticache:DescribeEvents",
    "elasticache:DescribeGlobalReplicationGroups",
    "elasticache:DescribeReplicationGroups",
    "elasticache:DescribeReservedCacheNodes",
    "elasticache:DescribeReservedCacheNodesOfferings",
    "elasticache:DescribeServiceUpdates",
    "elasticache:DescribeSnapshots",
    "elasticache:DescribeUpdateActions",
    "elasticache:DescribeUserGroups",
    "elasticache:DescribeUsers",
    "elasticbeanstalk:DescribeAccountAttributes",
    "elasticbeanstalk:DescribeApplicationVersions",
    "elasticbeanstalk:DescribeApplications",
    "elasticbeanstalk:DescribeEnvironments",
    "elasticbeanstalk:DescribeEvents",
    "elasticbeanstalk:ListAvailableSolutionStacks",
    "elasticbeanstalk:ListPlatformBranches",
    "elasticbeanstalk:ListPlatformVersions",
    "elasticfilesystem:DescribeAccessPoints",
    "elasticfilesystem:DescribeAccountPreferences",
    "elasticfilesystem:DescribeFileSystems",
    "elasticloadbalancing::DescribeAccountLimits",
    "elasticloadbalancing::DescribeLoadBalancers",
    "elasticloadbalancing::DescribeSslPolicies",
    "elasticloadbalancing::DescribeTargetGroups",
    "elasticloadbalancing:DescribeAccountLimits",
    "elasticloadbalancing:DescribeLoadBalancerPolicies",
    "elasticloadbalancing:DescribeLoadBalancerPolicyTypes",
    "elasticloadbalancing:DescribeLoadBalancers",
    "elasticmapreduce:GetBlockPublicAccessConfiguration",
    "elasticmapreduce:ListClusters",
    "elasticmapreduce:ListNotebookExecutions",
    "elasticmapreduce:ListReleaseLabels",
    "elasticmapreduce:ListSecurityConfigurations",
    "elasticmapreduce:ListStudioSessionMappings",
    "elasticmapreduce:ListStudios",
    "emr-containers:ListJobTemplates",
    "emr-containers:ListVirtualClusters",
    "emr-serverless:ListApplications",
    "entityresolution:GetIdMappingWorkflow",
    "entityresolution:GetMatchingWorkflow",
    "entityresolution:GetSchemaMapping",
    "entityresolution:ListIdMappingJobs",
    "entityresolution:ListIdMappingWorkflows",
    "entityresolution:ListMatchingJobs",
    "entityresolution:ListMatchingWorkflows",
    "entityresolution:ListProviderServices",
    "entityresolution:ListSchemaMappings",
    "es:DescribeInboundConnections",
    "es:DescribeInboundCrossClusterSearchConnections",
    "es:DescribeOutboundConnections",
    "es:DescribeOutboundCrossClusterSearchConnections",
    "es:DescribePackages",
    "es:DescribeReservedElasticsearchInstanceOfferings",
    "es:DescribeReservedElasticsearchInstances",
    "es:DescribeReservedInstanceOfferings",
    "es:DescribeReservedInstances",
    "es:GetCompatibleElasticsearchVersions",
    "es:GetCompatibleVersions",
    "es:ListDomainNames",
    "es:ListElasticsearchVersions",
    "es:ListVersions",
    "es:ListVpcEndpoints",
    "events:DescribeApiDestination",
    "events:DescribeArchive",
    "events:DescribeConnection",
    "events:DescribeEndpoint",
    "events:DescribeEventBus",
    "events:DescribeReplay",
    "events:DescribeRule",
    "events:ListApiDestinations",
    "events:ListArchives",
    "events:ListConnections",
    "events:ListEndpoints",
    "events:ListEventBuses",
    "events:ListEventSources",
    "events:ListReplays",
    "events:ListRuleNamesByTarget",
    "events:ListRules",
    "events:ListTargetsByRule",
    "finspace:GetKxDatabase",
    "finspace:ListEnvironments",
    "finspace:ListKxChangesets",
    "finspace:ListKxDatabases",
    "finspace:ListKxEnvironments",
    "firehose:DescribeDeliveryStream",
    "firehose:ListDeliveryStreams",
    "firehose:ListTagsForDeliveryStream",
    "fis:GetAction",
    "fis:GetExperiment",
    "fis:GetExperimentTemplate",
    "fis:ListActions",
    "fis:ListExperimentTemplates",
    "fis:ListExperiments",
    "fis:ListTargetResourceTypes",
    "fms:GetAdminAccount",
    "fms:ListAdminsManagingAccount",
    "forecast:ListDatasetGroups",
    "forecast:ListDatasetImportJobs",
    "forecast:ListDatasets",
    "forecast:ListExplainabilities",
    "forecast:ListExplainabilityExports",
    "forecast:ListForecastExportJobs",
    "forecast:ListForecasts",
    "forecast:ListMonitors",
    "forecast:ListPredictorBacktestExportJobs",
    "forecast:ListPredictors",
    "forecast:ListWhatIfAnalyses",
    "forecast:ListWhatIfForecastExports",
    "forecast:ListWhatIfForecasts",
    "frauddetector:DescribeModelVersions",
    "frauddetector:GetBatchImportJobs",
    "frauddetector:GetBatchPredictionJobs",
    "frauddetector:GetDetectors",
    "frauddetector:GetEntityTypes",
    "frauddetector:GetEvent",
    "frauddetector:GetEventTypes",
    "frauddetector:GetExternalModels",
    "frauddetector:GetKMSEncryptionKey",
    "frauddetector:GetLabels",
    "frauddetector:GetListsMetadata",
    "frauddetector:GetModels",
    "frauddetector:GetOutcomes",
    "frauddetector:GetVariables",
    "frauddetector:ListEventPredictions",
    "fsx:DescribeBackups",
    "fsx:DescribeDataRepositoryAssociations",
    "fsx:DescribeDataRepositoryTasks",
    "fsx:DescribeFileCaches",
    "fsx:DescribeFileSystems",
    "fsx:DescribeSnapshots",
    "fsx:DescribeStorageVirtualMachines",
    "fsx:DescribeVolumes",
    "gamelift:DescribeEC2InstanceLimits",
    "gamelift:DescribeFleetAttributes",
    "gamelift:DescribeFleetCapacity",
    "gamelift:DescribeFleetUtilization",
    "gamelift:DescribeGameServer",
    "gamelift:DescribeGameServerGroup",
    "gamelift:DescribeGameServerInstances",
    "gamelift:DescribeGameSessionPlacement",
    "gamelift:DescribeGameSessionQueues",
    "gamelift:DescribeMatchmakingConfigurations",
    "gamelift:DescribeMatchmakingRuleSets",
    "gamelift:DescribeVpcPeeringAuthorizations",
    "gamelift:DescribeVpcPeeringConnections",
    "gamelift:GetGameSessionLog",
    "gamelift:GetGameSessionLogUrl",
    "gamelift:ListAliases",
    "gamelift:ListBuilds",
    "gamelift:ListFleets",
    "gamelift:ListGameServerGroups",
    "gamelift:ListLocations",
    "gamelift:ListScripts",
    "geo:DescribeGeofenceCollection",
    "geo:DescribeKey",
    "geo:DescribeMap",
    "geo:DescribePlaceIndex",
    "geo:DescribeRouteCalculator",
    "geo:DescribeTracker",
    "geo:GetDevicePosition",
    "geo:GetDevicePositionHistory",
    "geo:GetGeofence",
    "geo:GetPlace",
    "geo:ListDevicePositions",
    "geo:ListGeofenceCollections",
    "geo:ListGeofences",
    "geo:ListKeys",
    "geo:ListMaps",
    "geo:ListPlaceIndexes",
    "geo:ListRouteCalculators",
    "geo:ListTrackerConsumers",
    "geo:ListTrackers",
    "glue:GetBlueprint",
    "glue:GetBlueprintRun",
    "glue:GetBlueprintRuns",
    "glue:GetCatalogImportStatus",
    "glue:GetClassifier",
    "glue:GetClassifiers",
    "glue:GetColumnStatisticsForPartition",
    "glue:GetColumnStatisticsForTable",
    "glue:GetConnection",
    "glue:GetConnections",
    "glue:GetCrawler",
    "glue:GetCrawlerMetrics",
    "glue:GetCrawlers",
    "glue:GetCustomEntityType",
    "glue:GetDataCatalogEncryptionSettings",
    "glue:GetDataQualityResult",
    "glue:GetDataQualityRuleRecommendationRun",
    "glue:GetDataQualityRuleset",
    "glue:GetDataQualityRulesetEvaluationRun",
    "glue:GetDatabase",
    "glue:GetDatabases",
    "glue:GetDevEndpoint",
    "glue:GetDevEndpoints",
    "glue:GetJob",
    "glue:GetJobBookmark",
    "glue:GetJobRun",
    "glue:GetJobRuns",
    "glue:GetJobs",
    "glue:GetMLTransforms",
    "glue:GetMlTaskRun",
    "glue:GetMlTaskRuns",
    "glue:GetMlTransform",
    "glue:GetPartition",
    "glue:GetPartitionIndexes",
    "glue:GetPartitions",
    "glue:GetResourcePolicies",
    "glue:GetResourcePolicy",
    "glue:GetSecurityConfiguration",
    "glue:GetSecurityConfigurations",
    "glue:GetSession",
    "glue:GetTable",
    "glue:GetTableVersions",
    "glue:GetTables",
    "glue:GetTrigger",
    "glue:GetTriggers",
    "glue:GetUserDefinedFunction",
    "glue:GetUserDefinedFunctions",
    "glue:GetWorkflow",
    "glue:GetWorkflowRun",
    "glue:GetWorkflowRunProperties",
    "glue:GetWorkflowRuns",
    "glue:ListBlueprints",
    "glue:ListCrawlers",
    "glue:ListCrawls",
    "glue:ListCustomEntityTypes",
    "glue:ListDataQualityResults",
    "glue:ListDataQualityRuleRecommendationRuns",
    "glue:ListDataQualityRulesetEvaluationRuns",
    "glue:ListDataQualityRulesets",
    "glue:ListDevEndpoints",
    "glue:ListJobs",
    "glue:ListMLTransforms",
    "glue:ListRegistries",
    "glue:ListSchemas",
    "glue:ListSessions",
    "glue:ListStatements",
    "glue:ListTriggers",
    "glue:ListWorkflows",
    "grafana:ListVersions",
    "grafana:ListWorkspaces",
    "greengrass:GetBulkDeploymentStatus",
    "greengrass:GetConnectorDefinition",
    "greengrass:GetConnectorDefinitionVersion",
    "greengrass:GetCoreDefinition",
    "greengrass:GetCoreDefinitionVersion",
    "greengrass:GetCoreDevice",
    "greengrass:GetDeployment",
    "greengrass:GetDeviceDefinition",
    "greengrass:GetDeviceDefinitionVersion",
    "greengrass:GetFunctionDefinition",
    "greengrass:GetFunctionDefinitionVersion",
    "greengrass:GetGroup",
    "greengrass:GetGroupCertificateConfiguration",
    "greengrass:GetGroupVersion",
    "greengrass:GetLoggerDefinition",
    "greengrass:GetLoggerDefinitionVersion",
    "greengrass:GetResourceDefinition",
    "greengrass:GetResourceDefinitionVersion",
    "greengrass:GetSubscriptionDefinition",
    "greengrass:GetSubscriptionDefinitionVersion",
    "greengrass:GetThingRuntimeConfiguration",
    "greengrass:ListBulkDeploymentDetailedReports",
    "greengrass:ListBulkDeployments",
    "greengrass:ListClientDevicesAssociatedWithCoreDevice",
    "greengrass:ListComponents",
    "greengrass:ListConnectorDefinitionVersions",
    "greengrass:ListConnectorDefinitions",
    "greengrass:ListCoreDefinitionVersions",
    "greengrass:ListCoreDefinitions",
    "greengrass:ListCoreDevices",
    "greengrass:ListDeployments",
    "greengrass:ListDeviceDefinitionVersions",
    "greengrass:ListDeviceDefinitions",
    "greengrass:ListEffectiveDeployments",
    "greengrass:ListFunctionDefinitionVersions",
    "greengrass:ListFunctionDefinitions",
    "greengrass:ListGroupVersions",
    "greengrass:ListGroups",
    "greengrass:ListInstalledComponents",
    "greengrass:ListLoggerDefinitionVersions",
    "greengrass:ListLoggerDefinitions",
    "greengrass:ListResourceDefinitionVersions",
    "greengrass:ListResourceDefinitions",
    "greengrass:ListSubscriptionDefinitionVersions",
    "greengrass:ListSubscriptionDefinitions",
    "groundstation:ListConfigs",
    "groundstation:ListDataflowEndpointGroups",
    "groundstation:ListGroundStations",
    "groundstation:ListMissionProfiles",
    "groundstation:ListSatellites",
    "guardduty:GetInvitationsCount",
    "guardduty:ListDetectors",
    "guardduty:ListInvitations",
    "guardduty:ListOrganizationAdminAccounts",
    "healthlake:DescribeFhirDatastore",
    "healthlake:DescribeFhirExportJob",
    "healthlake:DescribeFhirImportJob",
    "healthlake:ListFHIRDatastores",
    "healthlake:ListFhirExportJobs",
    "healthlake:ListFhirImportJobs",
    "iam:GetAccountAuthorizationDetails",
    "iam:GetAccountPasswordPolicy",
    "iam:GetAccountSummary",
    "iam:GetGroup",
    "iam:GetGroupPolicy",
    "iam:GetInstanceProfile",
    "iam:GetLoginProfile",
    "iam:GetRole",
    "iam:GetRolePolicy",
    "iam:GetServerCertificate",
    "iam:GetUser",
    "iam:GetUserPolicy",
    "iam:ListAccessKeys",
    "iam:ListAccountAliases",
    "iam:ListAttachedGroupPolicies",
    "iam:ListAttachedRolePolicies",
    "iam:ListAttachedUserPolicies",
    "iam:ListGroupPolicies",
    "iam:ListGroups",
    "iam:ListGroupsForUser",
    "iam:ListInstanceProfileTags",
    "iam:ListInstanceProfiles",
    "iam:ListInstanceProfilesForRole",
    "iam:ListMFADevices",
    "iam:ListOpenIDConnectProviders",
    "iam:ListPolicies",
    "iam:ListRolePolicies",
    "iam:ListRoleTags",
    "iam:ListRoles",
    "iam:ListSAMLProviders",
    "iam:ListSSHPublicKeys",
    "iam:ListServerCertificateTags",
    "iam:ListServerCertificates",
    "iam:ListServiceSpecificCredentials",
    "iam:ListSigningCertificates",
    "iam:ListUserPolicies",
    "iam:ListUserTags",
    "iam:ListUsers",
    "iam:ListVirtualMFADevices",
    "imagebuilder:ListComponents",
    "imagebuilder:ListContainerRecipes",
    "imagebuilder:ListDistributionConfigurations",
    "imagebuilder:ListImagePipelines",
    "imagebuilder:ListImageRecipes",
    "imagebuilder:ListImageScanFindingAggregations",
    "imagebuilder:ListImageScanFindings",
    "imagebuilder:ListImages",
    "imagebuilder:ListInfrastructureConfigurations",
    "inspector2:GetConfiguration",
    "inspector2:GetDelegatedAdminAccount",
    "inspector2:GetEc2DeepInspectionConfiguration",
    "inspector2:GetFindingsReportStatus",
    "inspector2:ListAccountPermissions",
    "inspector2:ListCoverage",
    "inspector2:ListCoverageStatistics",
    "inspector2:ListDelegatedAdminAccounts",
    "inspector2:ListFilters",
    "inspector2:ListFindings",
    "inspector2:ListMembers",
    "inspector2:ListUsageTotals",
    "inspector:DescribeAssessmentRuns",
    "inspector:DescribeAssessmentTargets",
    "inspector:DescribeAssessmentTemplates",
    "inspector:DescribeCrossAccountAccessRole",
    "inspector:DescribeExclusions",
    "inspector:DescribeFindings",
    "inspector:DescribeResourceGroups",
    "inspector:DescribeRulesPackages",
    "inspector:ListAssessmentRuns",
    "inspector:ListAssessmentTargets",
    "inspector:ListAssessmentTemplates",
    "inspector:ListEventSubscriptions",
    "inspector:ListFindings",
    "inspector:ListRulesPackages",
    "internetmonitor:GetMonitor",
    "internetmonitor:ListHealthEvents",
    "internetmonitor:ListMonitors",
    "iot:DescribeAccountAuditConfiguration",
    "iot:DescribeAuditFinding",
    "iot:DescribeAuditMitigationActionsTask",
    "iot:DescribeAuditTask",
    "iot:DescribeAuthorizer",
    "iot:DescribeBillingGroup",
    "iot:DescribeCustomMetric",
    "iot:DescribeDefaultAuthorizer",
    "iot:DescribeDetectMitigationActionsTask",
    "iot:DescribeDimension",
    "iot:DescribeDomainConfiguration",
    "iot:DescribeEndpoint",
    "iot:DescribeEventConfigurations",
    "iot:DescribeFleetMetric",
    "iot:DescribeJob",
    "iot:DescribeJobExecution",
    "iot:DescribeJobTemplate",
    "iot:DescribeMitigationAction",
    "iot:DescribeProvisioningTemplate",
    "iot:DescribeRoleAlias",
    "iot:DescribeScheduledAudit",
    "iot:DescribeSecurityProfile",
    "iot:DescribeStream",
    "iot:DescribeThing",
    "iot:DescribeThingGroup",
    "iot:DescribeThingRegistrationTask",
    "iot:DescribeThingType",
    "iot:DescribeTunnel",
    "iot:GetBehaviorModelTrainingSummaries",
    "iot:GetCardinality",
    "iot:GetIndexingConfiguration",
    "iot:GetJobDocument",
    "iot:GetOtaUpdate",
    "iot:GetPackage",
    "iot:GetPackageConfiguration",
    "iot:GetPackageVersion",
    "iot:GetPercentiles",
    "iot:GetPolicy",
    "iot:GetRegistrationCode",
    "iot:GetRetainedMessage",
    "iot:GetStatistics",
    "iot:ListActiveViolations",
    "iot:ListAuditSuppressions",
    "iot:ListAuthorizers",
    "iot:ListBillingGroups",
    "iot:ListCACertificates",
    "iot:ListCertificates",
    "iot:ListCustomMetrics",
    "iot:ListDimensions",
    "iot:ListDomainConfigurations",
    "iot:ListFleetMetrics",
    "iot:ListIndices",
    "iot:ListJobExecutionsForJob",
    "iot:ListJobExecutionsForThing",
    "iot:ListJobTemplates",
    "iot:ListJobs",
    "iot:ListManagedJobTemplates",
    "iot:ListMitigationActions",
    "iot:ListNamedShadowsForThing",
    "iot:ListOTAUpdates",
    "iot:ListOutgoingCertificates",
    "iot:ListPackageVersions",
    "iot:ListPackages",
    "iot:ListPolicies",
    "iot:ListPolicyVersions",
    "iot:ListProvisioningTemplateVersions",
    "iot:ListProvisioningTemplates",
    "iot:ListRelatedResourcesForAuditFinding",
    "iot:ListRetainedMessages",
    "iot:ListRoleAliases",
    "iot:ListScheduledAudits",
    "iot:ListSecurityProfiles",
    "iot:ListStreams",
    "iot:ListTargetsForPolicy",
    "iot:ListTargetsForSecurityProfile",
    "iot:ListThingGroups",
    "iot:ListThingGroupsForThing",
    "iot:ListThingPrincipals",
    "iot:ListThingRegistrationTasks",
    "iot:ListThingTypes",
    "iot:ListThings",
    "iot:ListThingsInBillingGroup",
    "iot:ListThingsInThingGroup",
    "iot:ListTopicRuleDestinations",
    "iot:ListTopicRules",
    "iot:ListTunnels",
    "iotanalytics:DescribeChannel",
    "iotanalytics:DescribeDataset",
    "iotanalytics:DescribeDatastore",
    "iotanalytics:DescribeLoggingOptions",
    "iotanalytics:DescribePipeline",
    "iotanalytics:GetDatasetContent",
    "iotanalytics:ListChannels",
    "iotanalytics:ListDatasetContents",
    "iotanalytics:ListDatasets",
    "iotanalytics:ListDatastores",
    "iotanalytics:ListPipelines",
    "iotdeviceadvisor:GetEndpoint",
    "iotdeviceadvisor:GetSuiteDefinition",
    "iotdeviceadvisor:GetSuiteRun",
    "iotdeviceadvisor:GetSuiteRunReport",
    "iotdeviceadvisor:ListSuiteDefinitions",
    "iotdeviceadvisor:ListSuiteRuns",
    "iotevents-data:DescribeAlarm",
    "iotevents-data:DescribeDetector",
    "iotevents-data:ListAlarms",
    "iotevents-data:ListDetectors",
    "iotevents:DescribeAlarmModel",
    "iotevents:DescribeDetectorModel",
    "iotevents:DescribeInput",
    "iotevents:DescribeLoggingOptions",
    "iotevents:ListAlarmModelVersions",
    "iotevents:ListAlarmModels",
    "iotevents:ListDetectorModelVersions",
    "iotevents:ListDetectorModels",
    "iotevents:ListInputs",
    "iotfleetwise:GetCampaign",
    "iotfleetwise:GetDecoderManifest",
    "iotfleetwise:GetEncryptionConfiguration",
    "iotfleetwise:GetFleet",
    "iotfleetwise:GetLoggingOptions",
    "iotfleetwise:GetModelManifest",
    "iotfleetwise:GetRegisterAccountStatus",
    "iotfleetwise:GetSignalCatalog",
    "iotfleetwise:GetVehicle",
    "iotfleetwise:GetVehicleStatus",
    "iotfleetwise:ListCampaigns",
    "iotfleetwise:ListDecoderManifestNetworkInterfaces",
    "iotfleetwise:ListDecoderManifestSignals",
    "iotfleetwise:ListDecoderManifests",
    "iotfleetwise:ListFleets",
    "iotfleetwise:ListFleetsForVehicle",
    "iotfleetwise:ListModelManifestNodes",
    "iotfleetwise:ListModelManifests",
    "iotfleetwise:ListSignalCatalogNodes",
    "iotfleetwise:ListSignalCatalogs",
    "iotfleetwise:ListVehicles",
    "iotfleetwise:ListVehiclesInFleet",
    "iotsitewise:DescribeDefaultEncryptionConfiguration",
    "iotsitewise:DescribeLoggingOptions",
    "iotsitewise:DescribeStorageConfiguration",
    "iotsitewise:ListAssetModels",
    "iotsitewise:ListBulkImportJobs",
    "iotsitewise:ListGateways",
    "iotsitewise:ListPortals",
    "iotsitewise:ListTimeSeries",
    "iottwinmaker:GetComponentType",
    "iottwinmaker:GetEntity",
    "iottwinmaker:GetPricingPlan",
    "iottwinmaker:GetScene",
    "iottwinmaker:GetWorkspace",
    "iottwinmaker:ListSyncJobs",
    "iottwinmaker:ListWorkspaces",
    "iotwireless:GetDestination",
    "iotwireless:GetDeviceProfile",
    "iotwireless:GetEventConfigurationByResourceTypes",
    "iotwireless:GetLogLevelsByResourceTypes",
    "iotwireless:GetNetworkAnalyzerConfiguration",
    "iotwireless:GetServiceEndpoint",
    "iotwireless:GetServiceProfile",
    "iotwireless:GetWirelessDeviceImportTask",
    "iotwireless:GetWirelessDeviceStatistics",
    "iotwireless:GetWirelessGatewayStatistics",
    "iotwireless:ListDestinations",
    "iotwireless:ListDeviceProfiles",
    "iotwireless:ListDevicesForWirelessDeviceImportTask",
    "iotwireless:ListFuotaTasks",
    "iotwireless:ListMulticastGroups",
    "iotwireless:ListNetworkAnalyzerConfigurations",
    "iotwireless:ListPartnerAccounts",
    "iotwireless:ListQueuedMessages",
    "iotwireless:ListServiceProfiles",
    "iotwireless:ListWirelessDeviceImportTasks",
    "iotwireless:ListWirelessDevices",
    "iotwireless:ListWirelessGatewayTaskDefinitions",
    "iotwireless:ListWirelessGateways",
    "ivs:ListChannels",
    "ivs:ListPlaybackKeyPairs",
    "ivs:ListRecordingConfigurations",
    "ivs:ListStages",
    "ivs:ListStreams",
    "ivschat:ListLoggingConfigurations",
    "ivschat:ListRooms",
    "kafka:GetCompatibleKafkaVersions",
    "kafka:ListClusters",
    "kafka:ListClustersV2",
    "kafka:ListConfigurations",
    "kafka:ListKafkaVersions",
    "kafka:ListReplicators",
    "kafka:ListVpcConnections",
    "kafkaconnect:ListConnectors",
    "kafkaconnect:ListCustomPlugins",
    "kafkaconnect:ListWorkerConfigurations",
    "kendra-ranking:ListRescoreExecutionPlans",
    "kendra:ListIndices",
    "keyspaces:GetKeyspace",
    "keyspaces:GetTable",
    "kinesis:DescribeLimits",
    "kinesis:ListStreams",
    "kinesisanalytics:DescribeApplication",
    "kinesisanalytics:ListApplicationVersions",
    "kinesisanalytics:ListApplications",
    "kinesisvideo:GetDashStreamingSessionUrl",
    "kinesisvideo:GetHlsStreamingSessionUrl",
    "kinesisvideo:GetIceServerConfig",
    "kinesisvideo:ListFragments",
    "kinesisvideo:ListSignalingChannels",
    "kinesisvideo:ListStreams",
    "kms:DescribeCustomKeyStores",
    "kms:DescribeKey",
    "kms:GetKeyPolicy",
    "kms:GetKeyRotationStatus",
    "kms:GetPublicKey",
    "kms:ListAliases",
    "kms:ListGrants",
    "kms:ListKeyPolicies",
    "kms:ListKeys",
    "kms:ListResourceTags",
    "kms:ListRetirableGrants",
    "lakeformation:GetDataCellsFilter",
    "lakeformation:GetDataLakeSettings",
    "lakeformation:ListDataCellsFilter",
    "lakeformation:ListLFTags",
    "lakeformation:ListPermissions",
    "lakeformation:ListResources",
    "lakeformation:ListTableStorageOptimizers",
    "lambda:GetAccountSettings",
    "lambda:GetAlias",
    "lambda:GetFunction",
    "lambda:GetFunctionCodeSigningConfig",
    "lambda:GetFunctionConcurrency",
    "lambda:GetFunctionConfiguration",
    "lambda:GetFunctionEventInvokeConfig",
    "lambda:GetFunctionUrlConfig",
    "lambda:GetPolicy",
    "lambda:GetProvisionedConcurrencyConfig",
    "lambda:GetRuntimeManagementConfig",
    "lambda:ListAliases",
    "lambda:ListCodeSigningConfigs",
    "lambda:ListEventSourceMappings",
    "lambda:ListFunctionEventInvokeConfigs",
    "lambda:ListFunctionUrlConfigs",
    "lambda:ListFunctions",
    "lambda:ListLayerVersions",
    "lambda:ListLayers",
    "lambda:ListProvisionedConcurrencyConfigs",
    "lambda:ListVersionsByFunction",
    "lex-runtime:GetSession",
    "lex:GetBot",
    "lex:GetBotAlias",
    "lex:GetBotAliases",
    "lex:GetBotChannelAssociation",
    "lex:GetBotChannelAssociations",
    "lex:GetBotVersions",
    "lex:GetBots",
    "lex:GetBuiltinIntent",
    "lex:GetBuiltinIntents",
    "lex:GetBuiltinSlotTypes",
    "lex:GetImport",
    "lex:GetIntentVersions",
    "lex:GetIntents",
    "lex:GetMigrations",
    "lex:GetSlotTypeVersions",
    "lex:GetSlotTypes",
    "lex:ListBots",
    "lex:ListExports",
    "lex:ListImports",
    "lex:ListTestExecutions",
    "lex:ListTestSets",
    "license-manager-linux-subscriptions:GetServiceSettings",
    "lightsail:GetActiveNames",
    "lightsail:GetAlarms",
    "lightsail:GetBlueprints",
    "lightsail:GetBucketAccessKeys",
    "lightsail:GetBucketBundles",
    "lightsail:GetBuckets",
    "lightsail:GetBundles",
    "lightsail:GetCertificates",
    "lightsail:GetCloudFormationStackRecords",
    "lightsail:GetContactMethods",
    "lightsail:GetContainerAPIMetadata",
    "lightsail:GetContainerServicePowers",
    "lightsail:GetContainerServices",
    "lightsail:GetDisk",
    "lightsail:GetDiskSnapshot",
    "lightsail:GetDiskSnapshots",
    "lightsail:GetDisks",
    "lightsail:GetDistributionBundles",
    "lightsail:GetDistributions",
    "lightsail:GetDomains",
    "lightsail:GetExportSnapshotRecords",
    "lightsail:GetInstance",
    "lightsail:GetInstanceAccessDetails",
    "lightsail:GetInstancePortStates",
    "lightsail:GetInstanceSnapshot",
    "lightsail:GetInstanceSnapshots",
    "lightsail:GetInstanceState",
    "lightsail:GetInstances",
    "lightsail:GetKeyPair",
    "lightsail:GetKeyPairs",
    "lightsail:GetLoadBalancer",
    "lightsail:GetLoadBalancerTlsCertificates",
    "lightsail:GetLoadBalancerTlsPolicies",
    "lightsail:GetLoadBalancers",
    "lightsail:GetOperation",
    "lightsail:GetOperations",
    "lightsail:GetOperationsForResource",
    "lightsail:GetRegions",
    "lightsail:GetRelationalDatabase",
    "lightsail:GetRelationalDatabaseBlueprints",
    "lightsail:GetRelationalDatabaseBundles",
    "lightsail:GetRelationalDatabaseEvents",
    "lightsail:GetRelationalDatabaseLogEvents",
    "lightsail:GetRelationalDatabaseLogStreams",
    "lightsail:GetRelationalDatabaseMasterUserPassword",
    "lightsail:GetRelationalDatabaseParameters",
    "lightsail:GetRelationalDatabaseSnapshot",
    "lightsail:GetRelationalDatabaseSnapshots",
    "lightsail:GetRelationalDatabases",
    "lightsail:GetStaticIp",
    "lightsail:GetStaticIps",
    "logs:DescribeDestinations",
    "logs:DescribeExportTasks",
    "logs:DescribeLogGroups",
    "logs:DescribeMetricFilters",
    "logs:DescribeQueries",
    "logs:DescribeQueryDefinitions",
    "logs:DescribeResourcePolicies",
    "logs:DescribeSubscriptionFilters",
    "logs:GetDataProtectionPolicy",
    "lookoutequipment:DescribeDataset",
    "lookoutequipment:DescribeInferenceScheduler",
    "lookoutequipment:DescribeLabelGroup",
    "lookoutequipment:DescribeModel",
    "lookoutequipment:DescribeRetrainingScheduler",
    "lookoutequipment:ListDataIngestionJobs",
    "lookoutequipment:ListDatasets",
    "lookoutequipment:ListInferenceExecutions",
    "lookoutequipment:ListInferenceSchedulers",
    "lookoutequipment:ListLabelGroups",
    "lookoutequipment:ListLabels",
    "lookoutequipment:ListModelVersions",
    "lookoutequipment:ListModels",
    "lookoutequipment:ListRetrainingSchedulers",
    "lookoutequipment:ListSensorStatistics",
    "lookoutmetrics:ListAlerts",
    "lookoutmetrics:ListAnomalyDetectors",
    "lookoutmetrics:ListMetricSets",
    "lookoutvision:DescribeModelPackagingJob",
    "lookoutvision:DescribeProject",
    "lookoutvision:ListModelPackagingJobs",
    "lookoutvision:ListModels",
    "lookoutvision:ListProjects",
    "m2:GetApplication",
    "m2:GetBatchJobExecution",
    "m2:GetDataSetDetails",
    "m2:GetDataSetImportTask",
    "m2:GetDeployment",
    "m2:GetEnvironment",
    "m2:GetSignedBluinsightsUrl",
    "m2:ListApplicationVersions",
    "m2:ListApplications",
    "m2:ListBatchJobDefinitions",
    "m2:ListBatchJobExecutions",
    "m2:ListDataSetImportHistory",
    "m2:ListDataSets",
    "m2:ListDeployments",
    "m2:ListEngineVersions",
    "m2:ListEnvironments",
    "macie2:GetClassificationExportConfiguration",
    "macie2:GetInvitationsCount",
    "macie2:ListInvitations",
    "macie2:ListOrganizationAdminAccounts",
    "managedblockchain:GetMember",
    "managedblockchain:GetNetwork",
    "managedblockchain:GetNode",
    "managedblockchain:GetProposal",
    "managedblockchain:ListAccessors",
    "managedblockchain:ListInvitations",
    "managedblockchain:ListMembers",
    "managedblockchain:ListNetworks",
    "managedblockchain:ListProposalVotes",
    "managedblockchain:ListProposals",
    "mediaconnect:DescribeBridge",
    "mediaconnect:DescribeFlow",
    "mediaconnect:DescribeGateway",
    "mediaconnect:DescribeGatewayInstance",
    "mediaconnect:DescribeOffering",
    "mediaconnect:DescribeReservation",
    "mediaconnect:ListBridges",
    "mediaconnect:ListEntitlements",
    "mediaconnect:ListFlows",
    "mediaconnect:ListGatewayInstances",
    "mediaconnect:ListGateways",
    "mediaconnect:ListOfferings",
    "mediaconnect:ListReservations",
    "mediaconvert:DescribeEndpoints",
    "mediaconvert:GetJobTemplate",
    "mediaconvert:GetPolicy",
    "mediaconvert:GetPreset",
    "mediaconvert:GetQueue",
    "mediaconvert:ListJobTemplates",
    "mediaconvert:ListJobs",
    "mediaconvert:ListPresets",
    "mediaconvert:ListQueues",
    "medialive:DescribeAccountConfiguration",
    "medialive:DescribeMultiplex",
    "medialive:DescribeMultiplexProgram",
    "medialive:ListChannels",
    "medialive:ListInputDevices",
    "medialive:ListInputSecurityGroups",
    "medialive:ListInputs",
    "medialive:ListMultiplexPrograms",
    "medialive:ListMultiplexes",
    "medialive:ListOfferings",
    "medialive:ListReservations",
    "mediapackage-vod:DescribeAsset",
    "mediapackage-vod:DescribePackagingConfiguration",
    "mediapackage-vod:DescribePackagingGroup",
    "mediapackage-vod:ListAssets",
    "mediapackage-vod:ListPackagingConfigurations",
    "mediapackage-vod:ListPackagingGroups",
    "mediapackage:DescribeChannel",
    "mediapackage:DescribeHarvestJob",
    "mediapackage:DescribeOriginEndpoint",
    "mediapackage:ListChannels",
    "mediapackage:ListHarvestJobs",
    "mediapackage:ListOriginEndpoints",
    "mediapackagev2:GetChannel",
    "mediapackagev2:GetChannelGroup",
    "mediapackagev2:GetChannelPolicy",
    "mediapackagev2:GetOriginEndpoint",
    "mediapackagev2:GetOriginEndpointPolicy",
    "mediapackagev2:ListChannelGroups",
    "mediapackagev2:ListChannels",
    "mediapackagev2:ListOriginEndpoints",
    "mediastore:GetContainerPolicy",
    "mediastore:GetCorsPolicy",
    "mediastore:GetLifecyclePolicy",
    "mediastore:GetMetricPolicy",
    "mediastore:ListContainers",
    "mediatailor:DescribeChannel",
    "mediatailor:DescribeLiveSource",
    "mediatailor:DescribeProgram",
    "mediatailor:DescribeSourceLocation",
    "mediatailor:DescribeVodSource",
    "mediatailor:GetChannelPolicy",
    "mediatailor:GetChannelSchedule",
    "mediatailor:GetPlaybackConfiguration",
    "mediatailor:GetPrefetchSchedule",
    "mediatailor:ListChannels",
    "mediatailor:ListLiveSources",
    "mediatailor:ListPlaybackConfigurations",
    "mediatailor:ListPrefetchSchedules",
    "mediatailor:ListSourceLocations",
    "mediatailor:ListVodSources",
    "medical-imaging:ListDatastores",
    "memorydb:DescribeAcls",
    "memorydb:DescribeClusters",
    "memorydb:DescribeEngineVersions",
    "memorydb:DescribeEvents",
    "memorydb:DescribeParameterGroups",
    "memorydb:DescribeReservedNodes",
    "memorydb:DescribeReservedNodesOfferings",
    "memorydb:DescribeServiceUpdates",
    "memorydb:DescribeSnapshots",
    "memorydb:DescribeSubnetGroups",
    "memorydb:DescribeUsers",
    "mgh:DescribeHomeRegionControls",
    "mgh:DescribeMigrationTask",
    "mgh:GetHomeRegion",
    "mgh:ListApplicationStates",
    "mgh:ListCreatedArtifacts",
    "mgh:ListDiscoveredResources",
    "mgh:ListMigrationTasks",
    "mgh:ListProgressUpdateStreams",
    "migrationhub-orchestrator:GetWorkflow",
    "migrationhub-orchestrator:GetWorkflowStep",
    "migrationhub-orchestrator:ListPlugins",
    "migrationhub-orchestrator:ListTemplates",
    "migrationhub-orchestrator:ListWorkflows",
    "migrationhub-strategy:GetApplicationComponentDetails",
    "migrationhub-strategy:GetApplicationComponentStrategies",
    "migrationhub-strategy:GetImportFileTask",
    "migrationhub-strategy:GetLatestAssessmentId",
    "migrationhub-strategy:GetPortfolioPreferences",
    "migrationhub-strategy:GetPortfolioSummary",
    "migrationhub-strategy:GetRecommendationReportDetails",
    "migrationhub-strategy:GetServerDetails",
    "migrationhub-strategy:GetServerStrategies",
    "migrationhub-strategy:ListApplicationComponents",
    "migrationhub-strategy:ListCollectors",
    "migrationhub-strategy:ListImportFileTask",
    "migrationhub-strategy:ListServers",
    "mobiletargeting:GetAdmChannel",
    "mobiletargeting:GetApnsChannel",
    "mobiletargeting:GetApnsSandboxChannel",
    "mobiletargeting:GetApnsVoipChannel",
    "mobiletargeting:GetApnsVoipSandboxChannel",
    "mobiletargeting:GetApp",
    "mobiletargeting:GetApplicationDateRangeKpi",
    "mobiletargeting:GetApplicationSettings",
    "mobiletargeting:GetApps",
    "mobiletargeting:GetBaiduChannel",
    "mobiletargeting:GetCampaign",
    "mobiletargeting:GetCampaignActivities",
    "mobiletargeting:GetCampaignDateRangeKpi",
    "mobiletargeting:GetCampaignVersion",
    "mobiletargeting:GetCampaignVersions",
    "mobiletargeting:GetCampaigns",
    "mobiletargeting:GetChannels",
    "mobiletargeting:GetEmailChannel",
    "mobiletargeting:GetEmailTemplate",
    "mobiletargeting:GetEndpoint",
    "mobiletargeting:GetEventStream",
    "mobiletargeting:GetExportJob",
    "mobiletargeting:GetExportJobs",
    "mobiletargeting:GetGcmChannel",
    "mobiletargeting:GetImportJob",
    "mobiletargeting:GetImportJobs",
    "mobiletargeting:GetInAppMessages",
    "mobiletargeting:GetInAppTemplate",
    "mobiletargeting:GetJourney",
    "mobiletargeting:GetJourneyDateRangeKpi",
    "mobiletargeting:GetJourneyExecutionActivityMetrics",
    "mobiletargeting:GetJourneyExecutionMetrics",
    "mobiletargeting:GetJourneyRunExecutionActivityMetrics",
    "mobiletargeting:GetJourneyRunExecutionMetrics",
    "mobiletargeting:GetJourneyRuns",
    "mobiletargeting:GetPushTemplate",
    "mobiletargeting:GetRecommenderConfiguration",
    "mobiletargeting:GetRecommenderConfigurations",
    "mobiletargeting:GetSegment",
    "mobiletargeting:GetSegmentExportJobs",
    "mobiletargeting:GetSegmentImportJobs",
    "mobiletargeting:GetSegmentVersion",
    "mobiletargeting:GetSegmentVersions",
    "mobiletargeting:GetSegments",
    "mobiletargeting:GetSmsChannel",
    "mobiletargeting:GetSmsTemplate",
    "mobiletargeting:GetUserEndpoints",
    "mobiletargeting:GetVoiceChannel",
    "mobiletargeting:GetVoiceTemplate",
    "mobiletargeting:ListJourneys",
    "mobiletargeting:ListTemplates",
    "mq:DescribeBroker",
    "mq:DescribeBrokerEngineTypes",
    "mq:DescribeBrokerInstanceOptions",
    "mq:DescribeConfiguration",
    "mq:DescribeUser",
    "mq:ListBrokers",
    "mq:ListConfigurationRevisions",
    "mq:ListConfigurations",
    "mq:ListUsers",
    "network-firewall:ListFirewallPolicies",
    "network-firewall:ListFirewalls",
    "network-firewall:ListRuleGroups",
    "network-firewall:ListTLSInspectionConfigurations",
    "networkmanager:DescribeGlobalNetworks",
    "networkmanager:GetConnectPeerAssociations",
    "networkmanager:GetRouteAnalysis",
    "networkmanager:ListAttachments",
    "networkmanager:ListConnectPeers",
    "networkmanager:ListCoreNetworks",
    "networkmanager:ListOrganizationServiceAccessStatus",
    "networkmanager:ListPeerings",
    "oam:ListLinks",
    "oam:ListSinks",
    "omics:GetAnnotationStore",
    "omics:GetVariantStore",
    "omics:ListAnnotationImportJobs",
    "omics:ListAnnotationStoreVersions",
    "omics:ListReferenceStores",
    "omics:ListRunGroups",
    "omics:ListRuns",
    "omics:ListSequenceStores",
    "omics:ListVariantImportJobs",
    "omics:ListVariantStores",
    "omics:ListWorkflows",
    "organizations:DescribeOrganization",
    "organizations:DescribeResourcePolicy",
    "organizations:ListAWSServiceAccessForOrganization",
    "organizations:ListAccounts",
    "organizations:ListCreateAccountStatus",
    "organizations:ListDelegatedAdministrators",
    "organizations:ListHandshakesForAccount",
    "organizations:ListHandshakesForOrganization",
    "organizations:ListRoots",
    "osis:GetPipelineBlueprint",
    "osis:ListPipelineBlueprints",
    "osis:ListPipelines",
    "outposts:ListCatalogItems",
    "outposts:ListOrders",
    "outposts:ListOutposts",
    "outposts:ListSites",
    "panorama:DescribeApplicationInstance",
    "panorama:DescribeApplicationInstanceDetails",
    "panorama:DescribeDevice",
    "panorama:DescribeDeviceJob",
    "panorama:DescribeNode",
    "panorama:DescribeNodeFromTemplateJob",
    "panorama:DescribePackage",
    "panorama:DescribePackageImportJob",
    "panorama:ListApplicationInstanceDependencies",
    "panorama:ListApplicationInstanceNodeInstances",
    "panorama:ListApplicationInstances",
    "panorama:ListDevices",
    "panorama:ListDevicesJobs",
    "panorama:ListNodeFromTemplateJobs",
    "panorama:ListNodes",
    "panorama:ListPackageImportJobs",
    "panorama:ListPackages",
    "payment-cryptography:ListAliases",
    "payment-cryptography:ListKeys",
    "pca-connector-ad:ListConnectors",
    "pca-connector-ad:ListDirectoryRegistrations",
    "personalize:ListBatchInferenceJobs",
    "personalize:ListBatchSegmentJobs",
    "personalize:ListCampaigns",
    "personalize:ListDatasetExportJobs",
    "personalize:ListDatasetGroups",
    "personalize:ListDatasetImportJobs",
    "personalize:ListDatasets",
    "personalize:ListEventTrackers",
    "personalize:ListFilters",
    "personalize:ListMetricAttributions",
    "personalize:ListRecipes",
    "personalize:ListRecommenders",
    "personalize:ListSchemas",
    "personalize:ListSolutionVersions",
    "personalize:ListSolutions",
    "pinpoint-sms-voice:GetConfigurationSetEventDestinations",
    "pipes:DescribePipe",
    "pipes:ListPipes",
    "polly:DescribeVoices",
    "polly:GetSpeechSynthesisTask",
    "polly:ListLexicons",
    "polly:ListSpeechSynthesisTasks",
    "pricing:DescribeServices",
    "pricing:GetAttributeValues",
    "pricing:GetProducts",
    "private-networks:ListNetworks",
    "profile:GetCalculatedAttributeDefinition",
    "profile:GetDomain",
    "profile:GetEventStream",
    "profile:GetIntegration",
    "profile:GetMatches",
    "profile:GetProfileObjectType",
    "profile:GetProfileObjectTypeTemplate",
    "profile:ListAccountIntegrations",
    "profile:ListCalculatedAttributeDefinitions",
    "profile:ListDomains",
    "profile:ListEventStreams",
    "profile:ListIdentityResolutionJobs",
    "profile:ListIntegrations",
    "profile:ListProfileObjectTypeTemplates",
    "profile:ListProfileObjectTypes",
    "profile:ListRuleBasedMatches",
    "profile:ListWorkflows",
    "proton:GetAccountSettings",
    "proton:GetComponent",
    "proton:GetEnvironment",
    "proton:GetEnvironmentTemplate",
    "proton:GetResourcesSummary",
    "proton:GetService",
    "proton:GetServiceInstance",
    "proton:GetServiceInstanceSyncStatus",
    "proton:GetServiceSyncBlockerSummary",
    "proton:GetServiceSyncConfig",
    "proton:GetServiceTemplate",
    "proton:ListComponentOutputs",
    "proton:ListComponentProvisionedResources",
    "proton:ListComponents",
    "proton:ListDeployments",
    "proton:ListEnvironmentOutputs",
    "proton:ListEnvironmentProvisionedResources",
    "proton:ListEnvironmentTemplateVersions",
    "proton:ListEnvironmentTemplates",
    "proton:ListEnvironments",
    "proton:ListRepositories",
    "proton:ListServiceInstanceOutputs",
    "proton:ListServiceInstanceProvisionedResources",
    "proton:ListServiceInstances",
    "proton:ListServicePipelineOutputs",
    "proton:ListServicePipelineProvisionedResources",
    "proton:ListServiceTemplateVersions",
    "proton:ListServiceTemplates",
    "proton:ListServices",
    "qldb:DescribeLedger",
    "qldb:GetDigest",
    "qldb:ListJournalKinesisStreamsForLedger",
    "qldb:ListJournalS3Exports",
    "qldb:ListJournalS3ExportsForLedger",
    "qldb:ListLedgers",
    "ram:GetResourceShareInvitations",
    "ram:ListPermissionAssociations",
    "ram:ListPermissions",
    "ram:ListReplacePermissionAssociationsWork",
    "ram:ListResourceTypes",
    "rds:DescribeAccountAttributes",
    "rds:DescribeBlueGreenDeployments",
    "rds:DescribeCertificates",
    "rds:DescribeDBClusterAutomatedBackups",
    "rds:DescribeDBClusterEndpoints",
    "rds:DescribeDBClusterParameterGroups",
    "rds:DescribeDBClusterSnapshots",
    "rds:DescribeDBClusters",
    "rds:DescribeDBEngineVersions",
    "rds:DescribeDBInstanceAutomatedBackups",
    "rds:DescribeDBInstances",
    "rds:DescribeDBParameterGroups",
    "rds:DescribeDBProxies",
    "rds:DescribeDBProxyEndpoints",
    "rds:DescribeDBSecurityGroups",
    "rds:DescribeDBSnapshots",
    "rds:DescribeDBSubnetGroups",
    "rds:DescribeEventCategories",
    "rds:DescribeEventSubscriptions",
    "rds:DescribeEvents",
    "rds:DescribeExportTasks",
    "rds:DescribeGlobalClusters",
    "rds:DescribeOptionGroups",
    "rds:DescribePendingMaintenanceActions",
    "rds:DescribeReservedDBInstances",
    "rds:DescribeSourceRegions",
    "redshift-data:ListStatements",
    "redshift-serverless:GetCredentials",
    "redshift-serverless:GetNamespace",
    "redshift-serverless:GetTableRestoreStatus",
    "redshift-serverless:GetWorkgroup",
    "redshift-serverless:ListEndpointAccess",
    "redshift-serverless:ListNamespaces",
    "redshift-serverless:ListRecoveryPoints",
    "redshift-serverless:ListSnapshots",
    "redshift-serverless:ListTableRestoreStatus",
    "redshift-serverless:ListUsageLimits",
    "redshift-serverless:ListWorkgroups",
    "redshift:DescribeAccountAttributes",
    "redshift:DescribeAuthenticationProfiles",
    "redshift:DescribeClusterDBRevisions",
    "redshift:DescribeClusterParameterGroups",
    "redshift:DescribeClusterSnapshots",
    "redshift:DescribeClusterSubnetGroups",
    "redshift:DescribeClusterTracks",
    "redshift:DescribeClusterVersions",
    "redshift:DescribeClusters",
    "redshift:DescribeCustomDomainAssociations",
    "redshift:DescribeDataShares",
    "redshift:DescribeDataSharesForConsumer",
    "redshift:DescribeDataSharesForProducer",
    "redshift:DescribeEndpointAccess",
    "redshift:DescribeEndpointAuthorization",
    "redshift:DescribeEventCategories",
    "redshift:DescribeEventSubscriptions",
    "redshift:DescribeEvents",
    "redshift:DescribeHsmClientCertificates",
    "redshift:DescribeHsmConfigurations",
    "redshift:DescribeOrderableClusterOptions",
    "redshift:DescribeReservedNodeOfferings",
    "redshift:DescribeReservedNodes",
    "redshift:DescribeScheduledActions",
    "redshift:DescribeSnapshotCopyGrants",
    "redshift:DescribeSnapshotSchedules",
    "redshift:DescribeStorage",
    "redshift:DescribeTags",
    "redshift:DescribeUsageLimits",
    "refactor-spaces:ListEnvironments",
    "rekognition:DescribeCollection",
    "rekognition:DescribeProjects",
    "rekognition:DescribeStreamProcessor",
    "rekognition:GetCelebrityInfo",
    "rekognition:GetCelebrityRecognition",
    "rekognition:GetContentModeration",
    "rekognition:GetFaceDetection",
    "rekognition:GetFaceSearch",
    "rekognition:GetLabelDetection",
    "rekognition:GetSegmentDetection",
    "rekognition:GetTextDetection",
    "rekognition:ListCollections",
    "rekognition:ListFaces",
    "rekognition:ListStreamProcessors",
    "rekognition:ListUsers",
    "resiliencehub:ListAppAssessments",
    "resiliencehub:ListApps",
    "resiliencehub:ListResiliencyPolicies",
    "resiliencehub:ListSuggestedResiliencyPolicies",
    "resource-explorer-2:GetDefaultView",
    "resource-explorer-2:GetIndex",
    "resource-explorer-2:ListIndexes",
    "resource-explorer-2:ListSupportedResourceTypes",
    "resource-explorer-2:ListViews",
    "resource-groups:GetAccountSettings",
    "resource-groups:ListGroups",
    "rolesanywhere:ListCrls",
    "rolesanywhere:ListProfiles",
    "rolesanywhere:ListSubjects",
    "rolesanywhere:ListTrustAnchors",
    "route53:GetCheckerIpRanges",
    "route53:GetGeoLocation",
    "route53:GetHealthCheckCount",
    "route53:GetHostedZoneCount",
    "route53:GetTrafficPolicyInstanceCount",
    "route53:ListCidrCollections",
    "route53:ListGeoLocations",
    "route53:ListHealthChecks",
    "route53:ListHostedZones",
    "route53:ListHostedZonesByName",
    "route53:ListQueryLoggingConfigs",
    "route53:ListReusableDelegationSets",
    "route53:ListTrafficPolicies",
    "route53:ListTrafficPolicyInstances",
    "route53domains:ListDomains",
    "route53domains:ListOperations",
    "route53domains:ListPrices",
    "route53resolver:GetFirewallDomainList",
    "route53resolver:GetFirewallRuleGroup",
    "route53resolver:GetFirewallRuleGroupAssociation",
    "route53resolver:GetOutpostResolver",
    "route53resolver:GetResolverEndpoint",
    "route53resolver:GetResolverQueryLogConfig",
    "route53resolver:GetResolverQueryLogConfigAssociation",
    "route53resolver:GetResolverRule",
    "route53resolver:GetResolverRuleAssociation",
    "route53resolver:ListFirewallConfigs",
    "route53resolver:ListFirewallDomainLists",
    "route53resolver:ListFirewallDomains",
    "route53resolver:ListFirewallRuleGroupAssociations",
    "route53resolver:ListFirewallRuleGroups",
    "route53resolver:ListFirewallRules",
    "route53resolver:ListOutpostResolvers",
    "route53resolver:ListResolverConfigs",
    "route53resolver:ListResolverDnssecConfigs",
    "route53resolver:ListResolverEndpointIpAddresses",
    "route53resolver:ListResolverEndpoints",
    "route53resolver:ListResolverQueryLogConfigAssociations",
    "route53resolver:ListResolverQueryLogConfigs",
    "route53resolver:ListResolverRuleAssociations",
    "route53resolver:ListResolverRules",
    "rum:GetAppMonitor",
    "rum:ListAppMonitors",
    "rum:ListRumMetricsDestinations",
    "s3-outposts:ListEndpoints",
    "s3-outposts:ListOutpostsWithS3",
    "s3:ListAllMyBuckets",
    "sagemaker-a2i-runtime:DescribeHumanLoop",
    "sagemaker:GetSagemakerServicecatalogPortfolioStatus",
    "sagemaker:ListActions",
    "sagemaker:ListAlgorithms",
    "sagemaker:ListAppImageConfigs",
    "sagemaker:ListApps",
    "sagemaker:ListArtifacts",
    "sagemaker:ListAutoMLJobs",
    "sagemaker:ListCandidatesForAutoMLJob",
    "sagemaker:ListCodeRepositories",
    "sagemaker:ListCompilationJobs",
    "sagemaker:ListContexts",
    "sagemaker:ListDataQualityJobDefinitions",
    "sagemaker:ListDomains",
    "sagemaker:ListEndpointConfigs",
    "sagemaker:ListEndpoints",
    "sagemaker:ListExperiments",
    "sagemaker:ListFeatureGroups",
    "sagemaker:ListFlowDefinitions",
    "sagemaker:ListHubs",
    "sagemaker:ListHumanTaskUis",
    "sagemaker:ListHyperParameterTuningJobs",
    "sagemaker:ListImages",
    "sagemaker:ListInferenceExperiments",
    "sagemaker:ListInferenceRecommendationsJobs",
    "sagemaker:ListLabelingJobs",
    "sagemaker:ListLineageGroups",
    "sagemaker:ListModelBiasJobDefinitions",
    "sagemaker:ListModelCardExportJobs",
    "sagemaker:ListModelCards",
    "sagemaker:ListModelExplainabilityJobDefinitions",
    "sagemaker:ListModelMetadata",
    "sagemaker:ListModelPackageGroups",
    "sagemaker:ListModelPackages",
    "sagemaker:ListModelQualityJobDefinitions",
    "sagemaker:ListModels",
    "sagemaker:ListMonitoringAlertHistory",
    "sagemaker:ListMonitoringExecutions",
    "sagemaker:ListMonitoringSchedules",
    "sagemaker:ListNotebookInstanceLifecycleConfigs",
    "sagemaker:ListNotebookInstances",
    "sagemaker:ListPipelines",
    "sagemaker:ListProcessingJobs",
    "sagemaker:ListProjects",
    "sagemaker:ListResourceCatalogs",
    "sagemaker:ListSpaces",
    "sagemaker:ListStudioLifecycleConfigs",
    "sagemaker:ListSubscribedWorkteams",
    "sagemaker:ListTrainingJobs",
    "sagemaker:ListTransformJobs",
    "sagemaker:ListTrialComponents",
    "sagemaker:ListTrials",
    "sagemaker:ListUserProfiles",
    "sagemaker:ListWorkforces",
    "sagemaker:ListWorkteams",
    "savingsplans:DescribeSavingsPlans",
    "savingsplans:DescribeSavingsPlansOfferingRates",
    "savingsplans:DescribeSavingsPlansOfferings",
    "scheduler:GetSchedule",
    "scheduler:GetScheduleGroup",
    "scheduler:ListScheduleGroups",
    "scheduler:ListSchedules",
    "schemas:DescribeDiscoverer",
    "schemas:DescribeRegistry",
    "schemas:DescribeSchema",
    "schemas:ListDiscoverers",
    "schemas:ListRegistries",
    "schemas:ListSchemaVersions",
    "schemas:ListSchemas",
    "sdb:ListDomains",
    "secretsmanager:DescribeSecret",
    "secretsmanager:GetRandomPassword",
    "secretsmanager:GetResourcePolicy",
    "secretsmanager:GetSecretValue",
    "secretsmanager:ListSecretVersionIds",
    "secretsmanager:ListSecrets",
    "securityhub:DescribeStandards",
    "securityhub:ListOrganizationAdminAccounts",
    "securityhub:ListSecurityControlDefinitions",
    "serverlessrepo:ListApplications",
    "servicecatalog:DescribeConstraint",
    "servicecatalog:DescribeCopyProductStatus",
    "servicecatalog:DescribePortfolio",
    "servicecatalog:DescribePortfolioShareStatus",
    "servicecatalog:DescribeProductView",
    "servicecatalog:DescribeProvisionedProductPlan",
    "servicecatalog:DescribeRecord",
    "servicecatalog:DescribeServiceAction",
    "servicecatalog:DescribeServiceActionExecutionParameters",
    "servicecatalog:GetAWSOrganizationsAccessStatus",
    "servicecatalog:GetApplication",
    "servicecatalog:GetAttributeGroup",
    "servicecatalog:GetConfiguration",
    "servicecatalog:ListAcceptedPortfolioShares",
    "servicecatalog:ListApplications",
    "servicecatalog:ListAssociatedAttributeGroups",
    "servicecatalog:ListAssociatedResources",
    "servicecatalog:ListAttributeGroups",
    "servicecatalog:ListAttributeGroupsForApplication",
    "servicecatalog:ListLaunchPaths",
    "servicecatalog:ListPortfolioAccess",
    "servicecatalog:ListPortfolios",
    "servicecatalog:ListProvisionedProductPlans",
    "servicecatalog:ListProvisioningArtifacts",
    "servicecatalog:ListProvisioningArtifactsForServiceAction",
    "servicecatalog:ListRecordHistory",
    "servicecatalog:ListServiceActions",
    "servicecatalog:ListServiceActionsForProvisioningArtifact",
    "servicecatalog:ListStackInstancesForProvisionedProduct",
    "servicediscovery:ListNamespaces",
    "servicediscovery:ListOperations",
    "servicediscovery:ListServices",
    "servicequotas:ListRequestedServiceQuotaChangeHistory",
    "servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
    "servicequotas:ListServices",
    "ses:DescribeActiveReceiptRuleSet",
    "ses:GetAccount",
    "ses:GetAccountSendingEnabled",
    "ses:GetBlacklistReports",
    "ses:GetConfigurationSet",
    "ses:GetConfigurationSetEventDestinations",
    "ses:GetContactList",
    "ses:GetCustomVerificationEmailTemplate",
    "ses:GetDedicatedIps",
    "ses:GetDeliverabilityDashboardOptions",
    "ses:GetDeliverabilityTestReport",
    "ses:GetDomainDeliverabilityCampaign",
    "ses:GetEmailIdentity",
    "ses:GetEmailIdentityPolicies",
    "ses:GetEmailTemplate",
    "ses:GetIdentityDkimAttributes",
    "ses:GetIdentityMailFromDomainAttributes",
    "ses:GetIdentityNotificationAttributes",
    "ses:GetIdentityPolicies",
    "ses:GetIdentityVerificationAttributes",
    "ses:GetMessageInsights",
    "ses:GetSendQuota",
    "ses:GetSendStatistics",
    "ses:ListConfigurationSets",
    "ses:ListContactLists",
    "ses:ListContacts",
    "ses:ListCustomVerificationEmailTemplates",
    "ses:ListDedicatedIpPools",
    "ses:ListDeliverabilityTestReports",
    "ses:ListEmailIdentities",
    "ses:ListEmailTemplates",
    "ses:ListExportJobs",
    "ses:ListIdentities",
    "ses:ListIdentityPolicies",
    "ses:ListReceiptFilters",
    "ses:ListReceiptRuleSets",
    "ses:ListRecommendations",
    "ses:ListSuppressedDestinations",
    "ses:ListTemplates",
    "shield:DescribeAttack",
    "shield:DescribeAttackStatistics",
    "shield:DescribeDrtAccess",
    "shield:DescribeEmergencyContactSettings",
    "shield:DescribeProtectionGroup",
    "shield:DescribeSubscription",
    "shield:GetSubscriptionState",
    "shield:ListAttacks",
    "shield:ListProtectionGroups",
    "shield:ListProtections",
    "shield:ListResourcesInProtectionGroup",
    "signer:DescribeSigningJob",
    "signer:GetSigningPlatform",
    "signer:GetSigningProfile",
    "signer:ListProfilePermissions",
    "signer:ListSigningJobs",
    "signer:ListSigningPlatforms",
    "signer:ListSigningProfiles",
    "simspaceweaver:DescribeApp",
    "simspaceweaver:DescribeSimulation",
    "simspaceweaver:ListApps",
    "simspaceweaver:ListSimulations",
    "sms-voice:DescribeAccountAttributes",
    "sms-voice:DescribeAccountLimits",
    "sms-voice:DescribeConfigurationSets",
    "sms-voice:DescribeOptOutLists",
    "sms-voice:DescribeOptedOutNumbers",
    "sms-voice:DescribePhoneNumbers",
    "sms-voice:DescribePools",
    "sms-voice:DescribeSenderIds",
    "sms-voice:DescribeSpendLimits",
    "snowball:DescribeAddresses",
    "snowball:GetSnowballUsage",
    "snowball:ListClusters",
    "snowball:ListCompatibleImages",
    "snowball:ListJobs",
    "snowball:ListLongTermPricing",
    "sns:GetSMSAttributes",
    "sns:GetSMSSandboxAccountStatus",
    "sns:ListOriginationNumbers",
    "sns:ListPhoneNumbersOptedOut",
    "sns:ListPlatformApplications",
    "sns:ListSMSSandboxPhoneNumbers",
    "sns:ListSubscriptions",
    "sns:ListTopics",
    "sqs:ListQueues",
    "ssm-contacts:ListContacts",
    "ssm-contacts:ListEngagements",
    "ssm-incidents:ListIncidentRecords",
    "ssm-incidents:ListReplicationSets",
    "ssm-incidents:ListResponsePlans",
    "ssm-sap:ListApplications",
    "ssm-sap:ListComponents",
    "ssm-sap:ListDatabases",
    "ssm:DescribeActivations",
    "ssm:DescribeAutomationExecutions",
    "ssm:DescribeInstanceInformation",
    "ssm:DescribeInstancePatchStatesForPatchGroup",
    "ssm:DescribeInventoryDeletions",
    "ssm:DescribeMaintenanceWindows",
    "ssm:DescribeOpsItems",
    "ssm:DescribeParameters",
    "ssm:DescribePatchBaselines",
    "ssm:DescribePatchGroupState",
    "ssm:DescribePatchGroups",
    "ssm:GetDefaultPatchBaseline",
    "ssm:GetInventory",
    "ssm:GetInventorySchema",
    "ssm:GetOpsSummary",
    "ssm:GetParameters",
    "ssm:GetPatchBaselineForPatchGroup",
    "ssm:ListAssociations",
    "ssm:ListCommandInvocations",
    "ssm:ListCommands",
    "ssm:ListComplianceSummaries",
    "ssm:ListDocuments",
    "ssm:ListOpsItemEvents",
    "ssm:ListOpsMetadata",
    "ssm:ListResourceComplianceSummaries",
    "ssm:ListResourceDataSync",
    "sso:ListInstances",
    "states:ListActivities",
    "states:ListStateMachines",
    "storagegateway:DescribeTapeArchives",
    "storagegateway:ListAutomaticTapeCreationPolicies",
    "storagegateway:ListFileShares",
    "storagegateway:ListFileSystemAssociations",
    "storagegateway:ListGateways",
    "storagegateway:ListTapePools",
    "storagegateway:ListTapes",
    "storagegateway:ListVolumes",
    "sts:GetCallerIdentity",
    "sts:GetFederationToken",
    "sts:GetSessionToken",
    "supportapp:GetAccountAlias",
    "supportapp:ListSlackChannelConfigurations",
    "supportapp:ListSlackWorkspaceConfigurations",
    "synthetics:DescribeCanaries",
    "synthetics:DescribeCanariesLastRun",
    "synthetics:DescribeRuntimeVersions",
    "synthetics:GetGroup",
    "synthetics:ListGroupResources",
    "synthetics:ListGroups",
    "tag:GetResources",
    "tag:GetTagKeys",
    "tag:GetTagValues",
    "textract:GetAdapter",
    "textract:GetAdapterVersion",
    "textract:ListAdapterVersions",
    "textract:ListAdapters",
    "timestream:DescribeDatabase",
    "timestream:DescribeEndpoints",
    "timestream:DescribeTable",
    "timestream:ListBatchLoadTasks",
    "timestream:ListDatabases",
    "timestream:ListScheduledQueries",
    "timestream:ListTables",
    "tnb:ListSolFunctionInstances",
    "tnb:ListSolFunctionPackages",
    "tnb:ListSolNetworkInstances",
    "tnb:ListSolNetworkOperations",
    "tnb:ListSolNetworkPackages",
    "transcribe:ListCallAnalyticsCategories",
    "transcribe:ListCallAnalyticsJobs",
    "transcribe:ListLanguageModels",
    "transcribe:ListMedicalTranscriptionJobs",
    "transcribe:ListMedicalVocabularies",
    "transcribe:ListTranscriptionJobs",
    "transcribe:ListVocabularies",
    "transcribe:ListVocabularyFilters",
    "transfer:ListCertificates",
    "transfer:ListConnectors",
    "transfer:ListProfiles",
    "transfer:ListSecurityPolicies",
    "transfer:ListServers",
    "transfer:ListWorkflows",
    "translate:DescribeTextTranslationJob",
    "translate:GetParallelData",
    "translate:GetTerminology",
    "translate:ListLanguages",
    "translate:ListParallelData",
    "translate:ListTerminologies",
    "translate:ListTextTranslationJobs",
    "verifiedpermissions:GetIdentitySource",
    "verifiedpermissions:GetPolicy",
    "verifiedpermissions:GetPolicyStore",
    "verifiedpermissions:GetPolicyTemplate",
    "verifiedpermissions:GetSchema",
    "verifiedpermissions:ListIdentitySources",
    "verifiedpermissions:ListPolicies",
    "verifiedpermissions:ListPolicyStores",
    "verifiedpermissions:ListPolicyTemplates",
    "voiceid:ListDomains",
    "vpc-lattice:ListServiceNetworks",
    "vpc-lattice:ListServices",
    "vpc-lattice:ListTargetGroups",
    "waf-regional:GetChangeToken",
    "waf-regional:ListByteMatchSets",
    "waf-regional:ListGeoMatchSets",
    "waf-regional:ListIPSets",
    "waf-regional:ListRateBasedRules",
    "waf-regional:ListRegexMatchSets",
    "waf-regional:ListRegexPatternSets",
    "waf-regional:ListRuleGroups",
    "waf-regional:ListRules",
    "waf-regional:ListSizeConstraintSets",
    "waf-regional:ListSqlInjectionMatchSets",
    "waf-regional:ListSubscribedRuleGroups",
    "waf-regional:ListWebACLs",
    "waf-regional:ListXssMatchSets",
    "waf:GetChangeToken",
    "waf:ListByteMatchSets",
    "waf:ListGeoMatchSets",
    "waf:ListIPSets",
    "waf:ListRateBasedRules",
    "waf:ListRegexMatchSets",
    "waf:ListRegexPatternSets",
    "waf:ListRuleGroups",
    "waf:ListRules",
    "waf:ListSizeConstraintSets",
    "waf:ListSqlInjectionMatchSets",
    "waf:ListSubscribedRuleGroups",
    "waf:ListWebACLs",
    "waf:ListXssMatchSets",
    "wellarchitected:GetProfileTemplate",
    "wellarchitected:ListLenses",
    "wellarchitected:ListNotifications",
    "wellarchitected:ListProfileNotifications",
    "wellarchitected:ListProfiles",
    "wellarchitected:ListReviewTemplates",
    "wellarchitected:ListShareInvitations",
    "wellarchitected:ListWorkloads",
    "wisdom:ListAssistants",
    "wisdom:ListKnowledgeBases",
    "workmail:ListOrganizations",
    "workspaces-web:ListBrowserSettings",
    "workspaces-web:ListIpAccessSettings",
    "workspaces-web:ListNetworkSettings",
    "workspaces-web:ListPortals",
    "workspaces-web:ListTrustStores",
    "workspaces-web:ListUserAccessLoggingSettings",
    "workspaces-web:ListUserSettings",
    "workspaces:DescribeApplications",
    "workspaces:DescribeConnectionAliases",
    "workspaces:DescribeIpGroups",
    "workspaces:DescribeTags",
    "workspaces:DescribeWorkspaceBundles",
    "workspaces:DescribeWorkspaceDirectories",
    "workspaces:DescribeWorkspaceImages",
    "workspaces:DescribeWorkspaces",
    "workspaces:DescribeWorkspacesConnectionStatus",
    "xray:GetEncryptionConfig",
    "xray:GetGroups",
    "xray:GetSamplingRules",
    "xray:GetSamplingStatisticSummaries",
    "xray:ListResourcePolicies",
]


class AWSManagedPoliciesGuesser:
    def __init__(self, discovered_permissions: Set[str]):
        # discovered_permissions: permissions the user was detected to have.
        self.discovered_permissions = discovered_permissions

    def fetch_managed_policies(self, url: str, cont: int = 0) -> List[Dict]:
        try:
            response = requests.get(url)
        except:
            if cont < 3:
                return self.fetch_managed_policies(url, cont + 1)
            else:
                raise Exception(f"Failed to fetch data: {url}")
            
        if response.status_code == 200:
            return response.json().get("policies", [])
        raise Exception(f"Failed to fetch data: HTTP {response.status_code}")

    def guess_permissions(self) -> Dict:
        # Fetch policies from the provided URL.
        policies = self.fetch_managed_policies(
            "https://raw.githubusercontent.com/iann0036/iam-dataset/main/aws/managed_policies.json"
        )
        
        # Build a mapping of policy name to its set of effective actions.
        policy_actions = {
            policy['name']: set(policy.get('effective_action_names', []))
            for policy in policies if 'name' in policy
        }
        
        # Pre-filter: Only keep policies that include at least one permission from self.discovered_permissions.
        relevant_policy_actions = {
            name: actions 
            for name, actions in policy_actions.items() 
            if actions & self.discovered_permissions
        }
        
        # Prepare result containers.
        result = {}
        
        # Detectable permissions (global) converted to a set.
        detectable = set(aws_bf_permissions_detectable)
        
        # Consider only the relevant policies.
        policy_names = list(relevant_policy_actions.keys())
        
        # Iterate over all combinations of 1 to 3 relevant policies.
        for r in range(1, 4):
            for combo in itertools.combinations(policy_names, r):
                # Combine actions for the current set of policies.
                combined_actions = set()
                for name in combo:
                    combined_actions |= relevant_policy_actions[name]
                
                # Focus on detectable permissions.
                union_detectable = combined_actions & detectable
                
                # Compute missing expected permissions.
                n_missing_detected = len([item for item in self.discovered_permissions if item not in union_detectable])
                
                # Skip combinations that doesn't have all the found permissions.
                if n_missing_detected != 0:
                    continue

                # Store top 3 combinations with smaller n_missing_total as long as less than 100 permissions were not found.
                n_missing_total = len([item for item in union_detectable if item not in self.discovered_permissions])
                if n_missing_total < 100:
                    if len(result) < 3 or any(k for k in result.keys() if n_missing_total < k):
                        policyname_already_in_result = False
                        for value in result.values():
                            if set(value["policies"]).issubset(combo):
                                policyname_already_in_result = True
                                break
                        if not policyname_already_in_result:
                            result[n_missing_total] = {
                                "policies": list(combo),
                                "permissions": sorted(combined_actions)
                            }
                        if len(result) > 3:
                            result.pop(max(result.keys()))
        
        if result:
            result = dict(sorted(result.items(), key=lambda item: item[0]))

        return result
